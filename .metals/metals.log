2024.09.23 21:25:42 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/Osprey' for client Neovim 0.10.1.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@47d3a81d]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@34f1c1c2]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@47d3a81d]
2024.09.23 21:25:42 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.09.23 21:25:42 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.09.23 21:25:43 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.09.23 21:25:43 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.09.23 21:25:43 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.09.23 21:25:50 INFO  running '/opt/homebrew/bin/sbt -Dbloop.export-jar-classifiers=sources bloopInstall'[0m
2024.09.23 21:25:51 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.09.23 21:25:52 INFO  [info] welcome to sbt 1.10.1 (Oracle Corporation Java 17.0.10)[0m
2024.09.23 21:25:54 INFO  [info] loading settings for project osprey-build-build-build from metals.sbt ...[0m
2024.09.23 21:25:54 INFO  [info] loading project definition from /Users/marcinzawadiak/Desk/Osprey/project/project/project[0m
2024.09.23 21:25:56 INFO  [info] loading settings for project osprey-build-build from metals.sbt ...[0m
2024.09.23 21:25:56 INFO  [info] loading project definition from /Users/marcinzawadiak/Desk/Osprey/project/project[0m
2024.09.23 21:25:59 INFO  [success] Generated .bloop/osprey-build-build.json[0m
2024.09.23 21:25:59 INFO  [success] Total time: 2 s, completed 23 Sept 2024, 21:25:59[0m
2024.09.23 21:25:59 INFO  [info] loading settings for project osprey-build from metals.sbt,plugins.sbt ...[0m
2024.09.23 21:26:00 INFO  [info] loading project definition from /Users/marcinzawadiak/Desk/Osprey/project[0m
2024.09.23 21:26:01 INFO  [success] Generated .bloop/osprey-build.json[0m
2024.09.23 21:26:01 INFO  [success] Total time: 2 s, completed 23 Sept 2024, 21:26:01[0m
2024.09.23 21:26:02 INFO  [info] loading settings for project root from build.sbt ...[0m
2024.09.23 21:26:02 INFO  [info] set current project to Osprey (in build file:/Users/marcinzawadiak/Desk/Osprey/)[0m
2024.09.23 21:26:02 INFO  [warn] there's a key that's not used by any other settings/tasks:[0m
2024.09.23 21:26:02 INFO  [warn]  [0m
2024.09.23 21:26:02 INFO  [warn] * root / idePackagePrefix[0m
2024.09.23 21:26:02 INFO  [warn]   +- /Users/marcinzawadiak/Desk/Osprey/build.sbt:8[0m
2024.09.23 21:26:02 INFO  [warn]  [0m
2024.09.23 21:26:02 INFO  [warn] note: a setting might still be used by a command; to exclude a key from this `lintUnused` check[0m
2024.09.23 21:26:02 INFO  [warn] either append it to `Global / excludeLintKeys` or call .withRank(KeyRanks.Invisible) on the key[0m
2024.09.23 21:26:02 INFO  [success] Generated .bloop/root-test.json[0m
2024.09.23 21:26:02 INFO  [success] Generated .bloop/root.json[0m
2024.09.23 21:26:02 INFO  [success] Total time: 0 s, completed 23 Sept 2024, 21:26:03[0m
2024.09.23 21:26:03 INFO  time: ran 'sbt bloopInstall' in 12s[0m
2024.09.23 21:26:03 INFO  Attempting to connect to the build server...[0m
2024.09.23 21:26:03 INFO  Setting up current java home /Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home in /Users/marcinzawadiak/.bloop/bloop.json[0m
2024.09.23 21:26:05 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.09.23 21:26:05 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.09.23 21:26:05 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.09.23 21:26:05 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.09.23 21:26:05 INFO  Attempting to connect to the build server...[0m
2024.09.23 21:26:05 INFO  Attempting to connect to the build server...[0m
2024.09.23 21:26:05 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.09.23 21:26:06 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.09.23 21:26:06 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.09.23 21:26:06 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.09.23 21:26:06 INFO  time: Connected to build server in 3.87s[0m
2024.09.23 21:26:06 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.09.23 21:26:06 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.09.23 21:26:07 INFO  time: Imported build in 0.12s[0m
2024.09.23 21:26:07 INFO  running doctor check[0m
2024.09.23 21:26:07 INFO  java targets: osprey-build, root-test, osprey-build-build, root[0m
2024.09.23 21:26:10 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.09.23 21:26:10 WARN  resetting database: Some(/Users/marcinzawadiak/.metals/metals.h2.db)[0m
2024.09.23 21:26:10 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.09.23 21:26:10 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.09.23 21:26:24 INFO  time: indexed workspace in 17s[0m
2024.09.23 21:26:24 INFO  compiling root (3 scala sources)[0m
2024.09.23 21:26:28 INFO  time: compiled root in 3.98s[0m
2024.09.23 21:29:30 INFO  Shutting down server[0m
2024.09.23 21:29:30 INFO  shutting down Metals[0m
2024.09.23 21:29:30 INFO  Shut down connection with build server.[0m
2024.09.23 21:29:30 INFO  Shut down connection with build server.[0m
2024.09.23 21:29:30 INFO  Shut down connection with build server.[0m
2024.09.24 13:12:06 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/Osprey' for client Neovim 0.10.1.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@1363ce49]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@34b4cf4c]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@1363ce49]
2024.09.24 13:12:06 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.09.24 13:12:06 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.09.24 13:12:07 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.09.24 13:12:07 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.09.24 13:12:07 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.09.24 13:12:07 INFO  Attempting to connect to the build server...[0m
2024.09.24 13:12:07 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.09.24 13:12:07 INFO  Attempting to connect to the build server...[0m
2024.09.24 13:12:07 INFO  Attempting to connect to the build server...[0m
2024.09.24 13:12:07 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.09.24 13:12:07 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.09.24 13:12:07 INFO  time: Connected to build server in 0.39s[0m
2024.09.24 13:12:07 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.09.24 13:12:08 INFO  running doctor check[0m
2024.09.24 13:12:08 INFO  java targets: osprey-build, root-test, osprey-build-build, root[0m
2024.09.24 13:12:10 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.09.24 13:12:10 INFO  time: indexed workspace in 2.76s[0m
2024.09.24 13:12:10 INFO  compiling root (3 scala sources)[0m
2024.09.24 13:12:12 INFO  time: compiled root in 1.51s[0m
Sept 24, 2024 1:12:12 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.09.24 13:15:56 INFO  Shutting down server[0m
2024.09.24 13:15:56 INFO  shutting down Metals[0m
2024.09.24 13:15:56 INFO  Shut down connection with build server.[0m
2024.09.24 13:15:56 INFO  Shut down connection with build server.[0m
2024.09.24 13:15:56 INFO  Shut down connection with build server.[0m
2024.10.06 17:15:03 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/Osprey' for client Neovim 0.10.1.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@4d2a1efb]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@2d2580e6]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@4d2a1efb]
2024.10.06 17:15:03 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.10.06 17:15:03 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 17:15:03 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 17:15:03 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 17:15:03 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 17:15:03 INFO  Attempting to connect to the build server...[0m
2024.10.06 17:15:03 INFO  Replacing bloop java home /Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home with java home at /Library/Java/JavaVirtualMachines/jdk-21.jdk/Contents/Home.[0m
2024.10.06 17:15:06 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 17:15:07 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 17:15:07 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 17:15:07 INFO  Attempting to connect to the build server...[0m
2024.10.06 17:15:07 INFO  Attempting to connect to the build server...[0m
2024.10.06 17:15:07 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 17:15:07 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 17:15:07 INFO  time: Connected to build server in 3.82s[0m
2024.10.06 17:15:07 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.10.06 17:15:08 INFO  time: Imported build in 0.19s[0m
2024.10.06 17:15:07 INFO  running doctor check[0m
2024.10.06 17:15:07 INFO  java targets: osprey-build, root-test, osprey-build-build, root[0m
2024.10.06 17:15:10 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.10.06 17:15:19 INFO  time: indexed workspace in 11s[0m
2024.10.06 17:15:19 INFO  compiling root (3 scala sources)[0m
2024.10.06 17:15:22 INFO  time: compiled root in 3.27s[0m
2024.10.06 17:17:16 INFO  compiling root (1 scala source)[0m
2024.10.06 17:17:16 INFO  time: compiled root in 0.69s[0m
2024.10.06 17:18:07 INFO  Shutting down server[0m
2024.10.06 17:18:07 INFO  shutting down Metals[0m
2024.10.06 17:18:07 INFO  Shut down connection with build server.[0m
2024.10.06 17:18:07 INFO  Shut down connection with build server.[0m
2024.10.06 17:18:07 INFO  Shut down connection with build server.[0m
2024.10.06 17:18:29 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/Osprey' for client Neovim 0.10.1.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@319a0ce8]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@3ed5fc0e]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@319a0ce8]
2024.10.06 17:18:29 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.10.06 17:18:29 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 17:18:30 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 17:18:30 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 17:18:30 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 17:18:30 INFO  Attempting to connect to the build server...[0m
2024.10.06 17:18:30 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 17:18:30 INFO  Attempting to connect to the build server...[0m
2024.10.06 17:18:30 INFO  Attempting to connect to the build server...[0m
2024.10.06 17:18:30 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 17:18:30 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 17:18:30 INFO  time: Connected to build server in 0.3s[0m
2024.10.06 17:18:30 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.10.06 17:18:30 INFO  running doctor check[0m
2024.10.06 17:18:30 INFO  java targets: osprey-build, root-test, osprey-build-build, root[0m
Oct 06, 2024 5:18:33 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.10.06 17:18:33 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.10.06 17:18:33 INFO  time: indexed workspace in 3.75s[0m
2024.10.06 17:21:09 INFO  Shutting down server[0m
2024.10.06 17:21:09 INFO  shutting down Metals[0m
2024.10.06 17:21:09 INFO  Shut down connection with build server.[0m
2024.10.06 17:21:09 INFO  Shut down connection with build server.[0m
2024.10.06 17:21:09 INFO  Shut down connection with build server.[0m
2024.10.06 17:21:17 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/Osprey' for client Neovim 0.10.1.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@791ef788]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@47e29494]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@791ef788]
2024.10.06 17:21:17 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.10.06 17:21:17 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 17:21:17 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 17:21:17 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 17:21:17 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 17:21:17 INFO  Attempting to connect to the build server...[0m
2024.10.06 17:21:17 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 17:21:17 INFO  Attempting to connect to the build server...[0m
2024.10.06 17:21:17 INFO  Attempting to connect to the build server...[0m
2024.10.06 17:21:17 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 17:21:18 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 17:21:18 INFO  time: Connected to build server in 0.28s[0m
2024.10.06 17:21:18 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.10.06 17:21:18 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 17:21:18 INFO  running doctor check[0m
2024.10.06 17:21:18 INFO  java targets: osprey-build, root-test, osprey-build-build, root[0m
2024.10.06 17:21:22 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.10.06 17:21:22 INFO  time: indexed workspace in 4.35s[0m
Oct 06, 2024 5:21:22 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.10.06 17:22:19 INFO  Shutting down server[0m
2024.10.06 17:22:19 INFO  shutting down Metals[0m
2024.10.06 17:22:19 INFO  Shut down connection with build server.[0m
2024.10.06 17:22:19 INFO  Shut down connection with build server.[0m
2024.10.06 17:22:19 INFO  Shut down connection with build server.[0m
2024.10.06 17:22:34 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/Osprey' for client Neovim 0.10.1.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@47d2de17]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@27b24498]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@47d2de17]
2024.10.06 17:22:34 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.10.06 17:22:34 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 17:22:34 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 17:22:34 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 17:22:35 INFO  Attempting to connect to the build server...[0m
2024.10.06 17:22:35 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 17:22:35 INFO  Attempting to connect to the build server...[0m
2024.10.06 17:22:35 INFO  Attempting to connect to the build server...[0m
2024.10.06 17:22:35 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 17:22:35 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 17:22:35 INFO  time: Connected to build server in 0.35s[0m
2024.10.06 17:22:35 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.10.06 17:22:35 INFO  running doctor check[0m
2024.10.06 17:22:35 INFO  java targets: osprey-build, root-test, osprey-build-build, root[0m
2024.10.06 17:22:39 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.10.06 17:22:39 INFO  time: indexed workspace in 3.67s[0m
Oct 06, 2024 5:22:39 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.10.06 17:24:44 INFO  Shutting down server[0m
2024.10.06 17:24:44 INFO  shutting down Metals[0m
2024.10.06 17:24:44 INFO  Shut down connection with build server.[0m
2024.10.06 17:24:44 INFO  Shut down connection with build server.[0m
2024.10.06 17:24:44 INFO  Shut down connection with build server.[0m
2024.10.06 22:28:15 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/Osprey' for client Neovim 0.10.1.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@3fa159f3]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@53076654]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@3fa159f3]
2024.10.06 22:28:15 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.10.06 22:28:16 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:28:16 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:28:16 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:28:16 INFO  Attempting to connect to the build server...[0m
2024.10.06 22:28:16 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 22:28:16 INFO  Attempting to connect to the build server...[0m
2024.10.06 22:28:16 INFO  Attempting to connect to the build server...[0m
2024.10.06 22:28:16 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 22:28:16 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 22:28:16 INFO  time: Connected to build server in 0.32s[0m
2024.10.06 22:28:16 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.10.06 22:28:17 INFO  running doctor check[0m
2024.10.06 22:28:17 INFO  java targets: osprey-build, root-test, osprey-build-build, root[0m
2024.10.06 22:28:19 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.10.06 22:28:19 INFO  time: indexed workspace in 3.04s[0m
Oct 06, 2024 10:28:20 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.10.06 22:28:20 INFO  compiling root (1 scala source)[0m
2024.10.06 22:28:20 INFO  time: compiled root in 0.45s[0m
2024.10.06 22:28:24 INFO  compiling root (1 scala source)[0m
2024.10.06 22:28:24 INFO  time: compiled root in 0.35s[0m
2024.10.06 22:28:31 INFO  Shutting down server[0m
2024.10.06 22:28:31 INFO  shutting down Metals[0m
2024.10.06 22:28:31 INFO  Shut down connection with build server.[0m
2024.10.06 22:28:31 INFO  Shut down connection with build server.[0m
2024.10.06 22:28:31 INFO  Shut down connection with build server.[0m
2024.10.06 22:29:35 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/Osprey' for client Neovim 0.10.1.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@37f918f5]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@6c208a9f]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@37f918f5]
2024.10.06 22:29:35 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.10.06 22:29:35 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:29:35 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:29:35 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:29:35 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:29:35 INFO  Attempting to connect to the build server...[0m
2024.10.06 22:29:36 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 22:29:36 INFO  Attempting to connect to the build server...[0m
2024.10.06 22:29:36 INFO  Attempting to connect to the build server...[0m
2024.10.06 22:29:36 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 22:29:36 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 22:29:36 INFO  time: Connected to build server in 0.32s[0m
2024.10.06 22:29:36 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.10.06 22:29:36 INFO  time: Imported build in 0.12s[0m
2024.10.06 22:29:35 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:29:36 INFO  running doctor check[0m
2024.10.06 22:29:36 INFO  java targets: osprey-build, root-test, osprey-build-build, root[0m
2024.10.06 22:29:39 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.10.06 22:29:39 INFO  time: indexed workspace in 3.57s[0m
Oct 06, 2024 10:29:40 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.10.06 22:29:49 INFO  Shutting down server[0m
2024.10.06 22:29:49 INFO  shutting down Metals[0m
2024.10.06 22:29:49 INFO  Shut down connection with build server.[0m
2024.10.06 22:29:49 INFO  Shut down connection with build server.[0m
2024.10.06 22:29:49 INFO  Shut down connection with build server.[0m
2024.10.06 22:52:01 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/Osprey' for client Neovim 0.10.1.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@13593313]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@508ca41]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@13593313]
2024.10.06 22:52:01 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.10.06 22:52:01 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:52:02 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:52:02 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:52:02 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:52:02 INFO  Attempting to connect to the build server...[0m
2024.10.06 22:52:02 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 22:52:02 INFO  Attempting to connect to the build server...[0m
2024.10.06 22:52:02 INFO  Attempting to connect to the build server...[0m
2024.10.06 22:52:02 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 22:52:02 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 22:52:02 INFO  time: Connected to build server in 0.3s[0m
2024.10.06 22:52:02 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.10.06 22:52:03 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:52:03 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:52:03 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:52:03 INFO  running doctor check[0m
2024.10.06 22:52:03 INFO  java targets: osprey-build, root-test, osprey-build-build, root[0m
2024.10.06 22:52:06 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.10.06 22:52:06 INFO  time: indexed workspace in 4.35s[0m
Oct 06, 2024 10:52:07 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.10.06 22:52:23 INFO  Shutting down server[0m
2024.10.06 22:52:23 INFO  shutting down Metals[0m
2024.10.06 22:52:23 INFO  Shut down connection with build server.[0m
2024.10.06 22:52:23 INFO  Shut down connection with build server.[0m
2024.10.06 22:52:23 INFO  Shut down connection with build server.[0m
2024.10.06 22:52:37 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/Osprey' for client Neovim 0.10.1.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@bda0dc3]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@1b36502e]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@bda0dc3]
2024.10.06 22:52:37 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.10.06 22:52:37 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:52:37 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:52:38 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:52:38 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:52:38 INFO  Attempting to connect to the build server...[0m
2024.10.06 22:52:38 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 22:52:38 INFO  Attempting to connect to the build server...[0m
2024.10.06 22:52:38 INFO  Attempting to connect to the build server...[0m
2024.10.06 22:52:38 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 22:52:38 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 22:52:38 INFO  time: Connected to build server in 0.32s[0m
2024.10.06 22:52:38 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.10.06 22:52:38 INFO  time: Imported build in 0.11s[0m
2024.10.06 22:52:38 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:52:38 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:52:39 INFO  running doctor check[0m
2024.10.06 22:52:39 INFO  java targets: osprey-build, root-test, osprey-build-build, root[0m
2024.10.06 22:52:42 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.10.06 22:52:42 INFO  time: indexed workspace in 4.18s[0m
Oct 06, 2024 10:52:43 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.10.06 22:53:10 INFO  Shutting down server[0m
2024.10.06 22:53:10 INFO  shutting down Metals[0m
2024.10.06 22:53:10 INFO  Shut down connection with build server.[0m
2024.10.06 22:53:10 INFO  Shut down connection with build server.[0m
2024.10.06 22:53:10 INFO  Shut down connection with build server.[0m
2024.10.06 22:53:12 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/Osprey' for client Neovim 0.10.1.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@719cca74]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@3be43700]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@719cca74]
2024.10.06 22:53:12 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.10.06 22:53:12 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:53:13 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:53:13 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:53:13 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:53:13 INFO  Attempting to connect to the build server...[0m
2024.10.06 22:53:13 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 22:53:13 INFO  Attempting to connect to the build server...[0m
2024.10.06 22:53:13 INFO  Attempting to connect to the build server...[0m
2024.10.06 22:53:13 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 22:53:13 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 22:53:13 INFO  time: Connected to build server in 0.29s[0m
2024.10.06 22:53:13 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.10.06 22:53:14 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:53:14 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:53:14 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:53:13 INFO  running doctor check[0m
2024.10.06 22:53:13 INFO  java targets: osprey-build, root-test, osprey-build-build, root[0m
2024.10.06 22:53:18 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.10.06 22:53:18 INFO  time: indexed workspace in 4.2s[0m
Oct 06, 2024 10:53:18 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.10.06 22:53:46 INFO  Shutting down server[0m
2024.10.06 22:53:46 INFO  shutting down Metals[0m
2024.10.06 22:53:46 INFO  Shut down connection with build server.[0m
2024.10.06 22:53:46 INFO  Shut down connection with build server.[0m
2024.10.06 22:53:46 INFO  Shut down connection with build server.[0m
2024.10.06 22:56:37 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/Osprey' for client Neovim 0.10.1.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@2f5dd7ae]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@23493d68]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@2f5dd7ae]
2024.10.06 22:56:37 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.10.06 22:56:37 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:56:37 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:56:37 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:56:38 INFO  Attempting to connect to the build server...[0m
2024.10.06 22:56:38 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.10.06 22:56:38 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 22:56:38 INFO  Attempting to connect to the build server...[0m
2024.10.06 22:56:38 INFO  Attempting to connect to the build server...[0m
2024.10.06 22:56:38 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 22:56:38 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.10.06 22:56:38 INFO  time: Connected to build server in 0.36s[0m
2024.10.06 22:56:38 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.10.06 22:56:38 INFO  running doctor check[0m
2024.10.06 22:56:38 INFO  java targets: osprey-build, root-test, osprey-build-build, root[0m
2024.10.06 22:56:42 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.10.06 22:56:43 INFO  time: indexed workspace in 4.25s[0m
Oct 06, 2024 10:56:43 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.10.06 23:03:17 INFO  Shutting down server[0m
2024.10.06 23:03:17 INFO  shutting down Metals[0m
2024.10.06 23:03:17 INFO  Shut down connection with build server.[0m
2024.10.06 23:03:17 INFO  Shut down connection with build server.[0m
2024.10.06 23:03:17 INFO  Shut down connection with build server.[0m
2024.12.22 13:47:41 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@39c11ca4]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@3ee94fae]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@39c11ca4]
2024.12.22 13:47:41 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.22 13:47:42 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 13:47:42 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 13:47:42 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 13:47:41 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 13:47:42 INFO  Attempting to connect to the build server...[0m
2024.12.22 13:47:42 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 13:47:42 INFO  Attempting to connect to the build server...[0m
2024.12.22 13:47:42 INFO  Attempting to connect to the build server...[0m
2024.12.22 13:47:42 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 13:47:42 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 13:47:42 INFO  time: Connected to build server in 0.91s[0m
2024.12.22 13:47:42 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.22 13:47:43 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 13:47:43 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 13:47:43 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 13:47:42 INFO  time: Imported build in 0.18s[0m
2024.12.22 13:47:43 INFO  running doctor check[0m
2024.12.22 13:47:43 INFO  java targets: osprey-build, root-test, osprey-build-build, root[0m
2024.12.22 13:47:46 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.22 13:47:46 INFO  time: indexed workspace in 4.14s[0m
2024.12.22 13:49:03 INFO  Shutting down server[0m
2024.12.22 13:49:03 INFO  shutting down Metals[0m
2024.12.22 13:49:03 INFO  Shut down connection with build server.[0m
2024.12.22 13:49:03 INFO  Shut down connection with build server.[0m
2024.12.22 13:49:03 INFO  Shut down connection with build server.[0m
2024.12.22 16:23:13 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@5252ff0a]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@2f84665a]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@5252ff0a]
2024.12.22 16:23:13 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.22 16:23:13 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:23:14 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:23:14 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:23:14 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:23:14 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:23:14 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:23:14 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:23:14 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:23:14 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:23:14 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:23:14 INFO  time: Connected to build server in 0.27s[0m
2024.12.22 16:23:14 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.22 16:23:15 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:23:15 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:23:14 INFO  running doctor check[0m
2024.12.22 16:23:14 INFO  java targets: osprey-build, root-test, osprey-build-build, root[0m
2024.12.22 16:23:17 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.22 16:23:17 INFO  time: indexed workspace in 3.29s[0m
Dec 22, 2024 4:23:18 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.22 16:24:48 INFO  compiling root (2 scala sources)[0m
2024.12.22 16:24:50 INFO  time: compiled root in 1.73s[0m
2024.12.22 16:24:56 INFO  compiling root (2 scala sources)[0m
2024.12.22 16:24:56 INFO  time: compiled root in 0.43s[0m
2024.12.22 16:25:58 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala:14: error: [dialect scala3] illegal start of simple expression
  val newLexicon = SoundChangeApplier.generateLexicon(wordList, soundChanges)
  ^[0m
2024.12.22 16:25:58 INFO  compiling root (2 scala sources)[0m
2024.12.22 16:25:58 INFO  time: compiled root in 0.27s[0m
2024.12.22 16:28:42 INFO  compiling root (2 scala sources)[0m
2024.12.22 16:28:42 INFO  time: compiled root in 0.27s[0m
2024.12.22 16:28:57 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala:14: error: [dialect scala3] illegal start of simple expression
  val newLexicon = SoundChangeApplier.generateLexicon(wordList, soundChanges)
  ^[0m
2024.12.22 16:28:57 INFO  compiling root (2 scala sources)[0m
2024.12.22 16:28:57 INFO  time: compiled root in 0.23s[0m
2024.12.22 16:29:06 INFO  compiling root (2 scala sources)[0m
2024.12.22 16:29:06 INFO  time: compiled root in 0.21s[0m
Dec 22, 2024 4:31:03 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 233,
      "uri": "file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala"
    },
    "contentChanges": [
      {
        "text": "package com.osprey.app\npackage main\n\nimport sca.*, os.*\n\nobject Main extends App {\n  // Unit Test\n  val wordList \u003d List(\"dabi\", \"jidva\", \"iopa\", \"karanamanamani\")\n  val soundChanges: Seq[SoundChangeApplier.SoundChange] \u003d\n    Seq((\"a\", \"e\", \"\", \"\"), (\"ji\", \"ko\", \"\", \"d\"))\n  val newLexicon \u003d SoundChangeApplier.generateLexicon(wordList, soundChanges)\n  newLexicon foreach println\n}\n"
      }
    ]
  }
}
java.lang.IllegalStateException: An unexpected exception occurred while executing jsonrpc method public abstract java.util.concurrent.CompletableFuture scala.meta.metals.lsp.TextDocumentService.didChange(org.eclipse.lsp4j.DidChangeTextDocumentParams)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:73)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:160)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:231)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:198)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:185)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:97)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:114)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.nio.file.NoSuchFileException: /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala
	at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:106)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
	at java.base/sun.nio.fs.UnixPath.toRealPath(UnixPath.java:834)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.dealias(ScalametaCommonEnrichments.scala:330)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionURIMtags.toAbsolutePath(MtagsEnrichments.scala:132)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:187)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:773)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:770)
	at scala.meta.internal.parsing.Trees.tokenized(Trees.scala:132)
	at scala.meta.internal.parsing.TokenEditDistance$.apply(TokenEditDistance.scala:506)
	at scala.meta.internal.metals.Diagnostics.toFreshDiagnostic(Diagnostics.scala:279)
	at scala.meta.internal.metals.Diagnostics.$anonfun$publishDiagnostics$2(Diagnostics.scala:239)
	at scala.meta.internal.metals.Diagnostics.$anonfun$publishDiagnostics$2$adapted(Diagnostics.scala:238)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.meta.internal.metals.Diagnostics.publishDiagnostics(Diagnostics.scala:238)
	at scala.meta.internal.metals.Diagnostics.publishDiagnostics(Diagnostics.scala:203)
	at scala.meta.internal.metals.Diagnostics.didChange(Diagnostics.scala:138)
	at scala.meta.internal.metals.MetalsLspService.didChange(MetalsLspService.scala:870)
	at scala.meta.internal.metals.ProjectMetalsLspService.didChange(ProjectMetalsLspService.scala:242)
	at scala.meta.internal.metals.WorkspaceLspService.didChange(WorkspaceLspService.scala:407)
	at scala.meta.metals.lsp.DelegatingScalaService.didChange(DelegatingScalaService.scala:50)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:65)
	... 11 more

2024.12.22 16:31:03 INFO  compiling root (2 scala sources)[0m
2024.12.22 16:31:03 INFO  time: compiled root in 0.6s[0m
2024.12.22 16:31:30 INFO  compiling root (2 scala sources)[0m
2024.12.22 16:31:31 INFO  time: compiled root in 1.31s[0m
2024.12.22 16:33:13 INFO  compiling root (1 scala source)[0m
2024.12.22 16:33:13 INFO  time: compiled root in 0.38s[0m
2024.12.22 16:33:32 INFO  compiling root (1 scala source)[0m
2024.12.22 16:33:32 INFO  time: compiled root in 0.31s[0m
2024.12.22 16:33:35 INFO  compiling root (1 scala source)[0m
2024.12.22 16:33:35 INFO  time: compiled root in 0.27s[0m
2024.12.22 16:33:49 INFO  Shutting down server[0m
2024.12.22 16:33:49 INFO  shutting down Metals[0m
2024.12.22 16:33:49 INFO  Shut down connection with build server.[0m
2024.12.22 16:33:49 INFO  Shut down connection with build server.[0m
2024.12.22 16:33:49 INFO  Shut down connection with build server.[0m
2024.12.22 16:34:43 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@29a201fe]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@1820d1ca]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@29a201fe]
2024.12.22 16:34:43 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.22 16:34:43 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:34:43 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:34:43 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:34:43 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:34:43 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:34:44 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:34:44 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:34:44 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:34:44 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:34:44 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:34:44 INFO  time: Connected to build server in 0.29s[0m
2024.12.22 16:34:44 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.22 16:34:44 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:34:44 INFO  running doctor check[0m
2024.12.22 16:34:44 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.22 16:34:48 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.22 16:34:48 INFO  time: indexed workspace in 4.04s[0m
Dec 22, 2024 4:34:48 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.22 16:40:34 INFO  compiling root (1 scala source)[0m
2024.12.22 16:40:34 INFO  time: compiled root in 0.51s[0m
2024.12.22 16:43:45 INFO  compiling root (1 scala source)[0m
2024.12.22 16:43:45 INFO  time: compiled root in 0.14s[0m
2024.12.22 16:45:35 INFO  compiling root (1 scala source)[0m
2024.12.22 16:45:35 INFO  time: compiled root in 0.16s[0m
2024.12.22 16:45:36 INFO  Shutting down server[0m
2024.12.22 16:45:36 INFO  shutting down Metals[0m
2024.12.22 16:45:36 INFO  Shut down connection with build server.[0m
2024.12.22 16:45:36 INFO  Shut down connection with build server.[0m
2024.12.22 16:45:36 INFO  Shut down connection with build server.[0m
2024.12.22 16:46:04 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@7560d498]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@6e8689dd]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@7560d498]
2024.12.22 16:46:04 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.22 16:46:04 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:46:04 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:46:04 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:46:04 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:46:04 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:46:04 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:46:04 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:46:04 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:46:05 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:46:05 INFO  time: Connected to build server in 0.35s[0m
2024.12.22 16:46:05 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.22 16:46:05 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:46:05 INFO  running doctor check[0m
2024.12.22 16:46:05 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.22 16:46:09 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.22 16:46:09 INFO  time: indexed workspace in 3.82s[0m
2024.12.22 16:46:09 INFO  compiling root (1 scala source)[0m
2024.12.22 16:46:09 INFO  time: compiled root in 0.55s[0m
Dec 22, 2024 4:46:10 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.22 16:46:09 INFO  compiling root (1 scala source)[0m
2024.12.22 16:46:09 INFO  time: compiled root in 0.28s[0m
2024.12.22 16:46:45 INFO  compiling root (1 scala source)[0m
2024.12.22 16:46:45 INFO  time: compiled root in 0.22s[0m
2024.12.22 16:46:52 INFO  compiling root (1 scala source)[0m
2024.12.22 16:46:52 INFO  time: compiled root in 0.16s[0m
2024.12.22 16:46:53 INFO  Shutting down server[0m
2024.12.22 16:46:53 INFO  shutting down Metals[0m
2024.12.22 16:46:53 INFO  Shut down connection with build server.[0m
2024.12.22 16:46:53 INFO  Shut down connection with build server.[0m
2024.12.22 16:46:53 INFO  Shut down connection with build server.[0m
2024.12.22 16:47:20 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@1d9fa898]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@7bbab1a9]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@1d9fa898]
2024.12.22 16:47:20 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.22 16:47:21 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:47:21 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:47:21 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:47:21 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:47:20 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:47:21 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:47:21 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:47:21 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:47:21 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:47:21 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:47:21 INFO  time: Connected to build server in 0.28s[0m
2024.12.22 16:47:21 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.22 16:47:22 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:47:22 INFO  running doctor check[0m
2024.12.22 16:47:22 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.22 16:47:25 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.22 16:47:25 INFO  time: indexed workspace in 4.12s[0m
2024.12.22 16:47:26 INFO  compiling root (1 scala source)[0m
2024.12.22 16:47:26 INFO  time: compiled root in 0.28s[0m
Dec 22, 2024 4:47:26 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.22 16:47:26 INFO  compiling root (1 scala source)[0m
2024.12.22 16:47:26 INFO  time: compiled root in 0.23s[0m
2024.12.22 16:47:26 INFO  compiling root (1 scala source)[0m
2024.12.22 16:47:26 INFO  time: compiled root in 0.27s[0m
2024.12.22 16:47:33 INFO  compiling root (1 scala source)[0m
2024.12.22 16:47:33 INFO  time: compiled root in 0.26s[0m
2024.12.22 16:47:33 INFO  compiling root (1 scala source)[0m
2024.12.22 16:47:33 INFO  time: compiled root in 0.36s[0m
2024.12.22 16:47:39 INFO  compiling root (1 scala source)[0m
2024.12.22 16:47:39 INFO  time: compiled root in 0.31s[0m
2024.12.22 16:47:39 INFO  compiling root (1 scala source)[0m
2024.12.22 16:47:39 INFO  time: compiled root in 0.32s[0m
2024.12.22 16:48:22 INFO  compiling root (2 scala sources)[0m
2024.12.22 16:48:22 INFO  time: compiled root in 0.39s[0m
2024.12.22 16:49:08 INFO  Shutting down server[0m
2024.12.22 16:49:08 INFO  shutting down Metals[0m
2024.12.22 16:49:08 INFO  Shut down connection with build server.[0m
2024.12.22 16:49:08 INFO  Shut down connection with build server.[0m
2024.12.22 16:49:08 INFO  Shut down connection with build server.[0m
2024.12.22 16:50:02 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@716ba57f]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@17a4f4a6]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@716ba57f]
2024.12.22 16:50:02 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.22 16:50:02 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:50:02 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:50:02 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:50:02 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:50:02 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:50:02 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:50:02 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:50:02 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:50:02 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:50:02 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:50:02 INFO  time: Connected to build server in 0.28s[0m
2024.12.22 16:50:02 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.22 16:50:03 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:50:02 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:50:03 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:50:03 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:50:02 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:50:03 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:50:02 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:50:03 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:50:02 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:50:03 INFO  running doctor check[0m
2024.12.22 16:50:03 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
Dec 22, 2024 4:50:04 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-22/r_compiler-error_16-50-04-732.md
Dec 22, 2024 4:50:04 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-22/r_compiler-error_16-50-04-824.md
2024.12.22 16:50:07 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.22 16:50:07 INFO  time: indexed workspace in 4.4s[0m
2024.12.22 16:50:33 INFO  Shutting down server[0m
2024.12.22 16:50:33 INFO  shutting down Metals[0m
2024.12.22 16:50:33 INFO  Shut down connection with build server.[0m
2024.12.22 16:50:33 INFO  Shut down connection with build server.[0m
2024.12.22 16:50:33 INFO  Shut down connection with build server.[0m
java.util.concurrent.RejectedExecutionException: Task Future(<not completed>) rejected from java.util.concurrent.ThreadPoolExecutor@45ca843[Shutting down, pool size = 2, active threads = 2, queued tasks = 0, completed tasks = 2777]
	at java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2081)
	at java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:841)
	at java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1376)
	at scala.concurrent.impl.ExecutionContextImpl.execute(ExecutionContextImpl.scala:21)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:429)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:435)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:506)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024.12.22 16:51:35 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@75399556]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@53f5b120]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@75399556]
2024.12.22 16:51:37 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.22 16:51:37 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:51:38 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:51:38 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:51:38 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:51:38 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:51:38 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:51:38 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:51:38 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:51:38 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:51:38 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:51:38 INFO  time: Connected to build server in 0.37s[0m
2024.12.22 16:51:38 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.22 16:51:39 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:51:39 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:51:39 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:51:39 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:51:39 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:51:39 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:51:39 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:51:39 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:51:39 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/test/scala/soundchangetest/SoundChangeTest.sc. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:51:39 INFO  running doctor check[0m
2024.12.22 16:51:39 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
Dec 22, 2024 4:51:39 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5
2024.12.22 16:51:42 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.22 16:51:42 INFO  time: indexed workspace in 4.25s[0m
2024.12.22 16:51:52 INFO  Shutting down server[0m
2024.12.22 16:51:52 INFO  shutting down Metals[0m
2024.12.22 16:51:52 INFO  Shut down connection with build server.[0m
2024.12.22 16:51:52 INFO  Shut down connection with build server.[0m
2024.12.22 16:51:52 INFO  Shut down connection with build server.[0m
Dec 22, 2024 4:51:52 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint notify
INFO: Failed to send notification message.
org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.nio.channels.AsynchronousCloseException
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:41)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.notify(RemoteEndpoint.java:135)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.sendCancelNotification(RemoteEndpoint.java:191)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:160)
	at scala.meta.internal.metals.utils.FutureWithTimeout$$anon$1.$anonfun$cancel$1(FutureWithTimeout.scala:37)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:217)
	at scala.meta.internal.metals.utils.FutureWithTimeout$$anon$1.cancel(FutureWithTimeout.scala:37)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:334)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.utils.RequestRegistry.cancel(RequestRegistry.scala:94)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:450)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:182)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:174)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.nio.channels.AsynchronousCloseException
	at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:203)
	at java.base/sun.nio.ch.SinkChannelImpl.endWrite(SinkChannelImpl.java:268)
	at java.base/sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:290)
	at java.base/sun.nio.ch.ChannelOutputStream.writeFully(ChannelOutputStream.java:68)
	at java.base/sun.nio.ch.ChannelOutputStream.write(ChannelOutputStream.java:102)
	at java.base/java.io.OutputStream.write(OutputStream.java:124)
	at java.base/sun.nio.ch.ChannelOutputStream.write(ChannelOutputStream.java:79)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:139)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:110)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:67)
	... 20 more

2024.12.22 16:51:52 INFO  Scala test classes not supported by server
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-230]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.jdbc.JdbcConnection.checkClosed(JdbcConnection.java:1420)
	at org.h2.jdbc.JdbcStatement.checkClosed(JdbcStatement.java:1302)
	at org.h2.jdbc.JdbcPreparedStatement.executeQuery(JdbcPreparedStatement.java:122)
	at scala.meta.internal.metals.JdbcEnrichments$XtensionConnection.query(JdbcEnrichments.scala:37)
	at scala.meta.internal.metals.DismissedNotifications$Notification.isDismissed(DismissedNotifications.scala:68)
	at scala.meta.internal.metals.utils.RequestRegistry.$anonfun$register$1(RequestRegistry.scala:63)
	at scala.meta.internal.metals.utils.RequestRegistry.$anonfun$register$1$adapted(RequestRegistry.scala:63)
	at scala.Option.exists(Option.scala:406)
	at scala.meta.internal.metals.utils.RequestRegistry.register(RequestRegistry.scala:63)
	at scala.meta.internal.metals.BuildServerConnection.scala$meta$internal$metals$BuildServerConnection$$runWithCanceling$1(BuildServerConnection.scala:511)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$3(BuildServerConnection.scala:521)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:470)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.lang.Thread.run(Thread.java:1583)
[0m
java.util.concurrent.RejectedExecutionException: Task Future(<not completed>) rejected from java.util.concurrent.ThreadPoolExecutor@45ca843[Shutting down, pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 872]
	at java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2081)
	at java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:841)
	at java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1376)
	at scala.concurrent.impl.ExecutionContextImpl.execute(ExecutionContextImpl.scala:21)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:429)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$DefaultPromise.linkRootOf(Promise.scala:347)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:492)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024.12.22 16:55:00 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@450fa96f]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@2b365292]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@450fa96f]
2024.12.22 16:55:00 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.22 16:55:00 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:55:00 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:55:00 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:55:00 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:55:00 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:55:00 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:55:00 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:55:00 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:55:01 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:55:01 INFO  time: Connected to build server in 0.28s[0m
2024.12.22 16:55:01 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.22 16:55:00 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:55:01 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:55:01 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:55:01 INFO  running doctor check[0m
2024.12.22 16:55:01 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
Dec 22, 2024 4:55:02 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.22 16:55:05 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.22 16:55:05 INFO  time: indexed workspace in 4.36s[0m
2024.12.22 16:55:55 INFO  compiling root (1 scala source)[0m
2024.12.22 16:55:55 INFO  time: compiled root in 0.2s[0m
2024.12.22 16:56:39 INFO  compiling root (1 scala source)[0m
2024.12.22 16:56:39 INFO  time: compiled root in 0.18s[0m
2024.12.22 16:56:40 INFO  Shutting down server[0m
2024.12.22 16:56:40 INFO  shutting down Metals[0m
2024.12.22 16:56:40 INFO  Shut down connection with build server.[0m
2024.12.22 16:56:40 INFO  Shut down connection with build server.[0m
2024.12.22 16:56:40 INFO  Shut down connection with build server.[0m
2024.12.22 16:58:35 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@4140178]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@24c4c0d0]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@4140178]
2024.12.22 16:58:35 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.22 16:58:36 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:58:36 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:58:36 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.22 16:58:36 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:58:36 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:58:36 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:58:36 INFO  Attempting to connect to the build server...[0m
2024.12.22 16:58:36 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:58:36 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.22 16:58:36 INFO  time: Connected to build server in 0.3s[0m
2024.12.22 16:58:36 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.22 16:58:36 INFO  time: Imported build in 0.11s[0m
2024.12.22 16:58:37 INFO  running doctor check[0m
2024.12.22 16:58:37 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.22 16:58:40 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.22 16:58:40 INFO  time: indexed workspace in 3.84s[0m
Dec 22, 2024 4:58:40 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.22 17:01:46 INFO  compiling root (1 scala source)[0m
2024.12.22 17:01:46 INFO  time: compiled root in 0.25s[0m
2024.12.22 17:01:47 INFO  Shutting down server[0m
2024.12.22 17:01:47 INFO  shutting down Metals[0m
2024.12.22 17:01:47 INFO  Shut down connection with build server.[0m
2024.12.22 17:01:47 INFO  Shut down connection with build server.[0m
2024.12.22 17:01:47 INFO  Shut down connection with build server.[0m
2024.12.24 07:43:15 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@65aae1d7]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@5f651ed0]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@65aae1d7]
2024.12.24 07:43:15 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 07:43:15 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 07:43:15 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 07:43:15 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 07:43:15 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 07:43:15 INFO  Attempting to connect to the build server...[0m
2024.12.24 07:43:15 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 07:43:15 INFO  Attempting to connect to the build server...[0m
2024.12.24 07:43:15 INFO  Attempting to connect to the build server...[0m
2024.12.24 07:43:15 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 07:43:16 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 07:43:16 INFO  time: Connected to build server in 0.29s[0m
2024.12.24 07:43:16 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 07:43:16 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 07:43:16 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 07:43:16 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 07:43:17 INFO  running doctor check[0m
2024.12.24 07:43:17 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.24 07:43:19 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 07:43:19 INFO  time: indexed workspace in 3.49s[0m
Dec 24, 2024 7:43:20 AM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 07:46:26 INFO  Shutting down server[0m
2024.12.24 07:46:26 INFO  shutting down Metals[0m
2024.12.24 07:46:26 INFO  Shut down connection with build server.[0m
2024.12.24 07:46:26 INFO  Shut down connection with build server.[0m
2024.12.24 07:46:26 INFO  Shut down connection with build server.[0m
2024.12.24 15:19:55 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@5085e3ea]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@4322b2f8]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@5085e3ea]
2024.12.24 15:19:55 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:19:55 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:19:55 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:19:55 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:19:55 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:19:55 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:19:56 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:19:56 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:19:56 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:19:56 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:19:56 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:19:56 INFO  time: Connected to build server in 0.3s[0m
2024.12.24 15:19:56 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 15:19:56 INFO  running doctor check[0m
2024.12.24 15:19:56 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.24 15:20:00 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
Dec 24, 2024 3:20:00 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 15:20:01 INFO  time: indexed workspace in 4.32s[0m
2024.12.24 15:28:35 INFO  compiling root (1 scala source)[0m
2024.12.24 15:28:35 INFO  time: compiled root in 0.66s[0m
2024.12.24 15:28:35 INFO  compiling root (1 scala source)[0m
2024.12.24 15:28:37 INFO  time: compiled root in 0.69s[0m
2024.12.24 15:30:40 INFO  compiling root (2 scala sources)[0m
2024.12.24 15:30:40 INFO  time: compiled root in 0.61s[0m
2024.12.24 15:31:14 INFO  compiling root (2 scala sources)[0m
2024.12.24 15:31:14 INFO  time: compiled root in 0.29s[0m
2024.12.24 15:31:52 INFO  compiling root (2 scala sources)[0m
2024.12.24 15:31:52 INFO  time: compiled root in 0.27s[0m
2024.12.24 15:32:20 INFO  compiling root (2 scala sources)[0m
2024.12.24 15:32:20 INFO  time: compiled root in 0.29s[0m
2024.12.24 15:32:29 INFO  Shutting down server[0m
2024.12.24 15:32:29 INFO  shutting down Metals[0m
2024.12.24 15:32:29 INFO  Shut down connection with build server.[0m
2024.12.24 15:32:29 INFO  Shut down connection with build server.[0m
2024.12.24 15:32:29 INFO  Shut down connection with build server.[0m
2024.12.24 15:33:02 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@395311c6]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@5a51c3a8]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@395311c6]
2024.12.24 15:33:02 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:33:03 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:33:03 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:33:03 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sca/SoundChangeApplier.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:33:03 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:33:03 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:33:03 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:33:03 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:33:03 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:33:03 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:33:03 INFO  time: Connected to build server in 0.33s[0m
2024.12.24 15:33:03 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 15:33:04 INFO  running doctor check[0m
2024.12.24 15:33:04 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
Dec 24, 2024 3:33:07 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 15:33:07 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:33:07 WARN  resetting database: Some(/Users/marcinzawadiak/.metals/metals.h2.db)[0m
2024.12.24 15:33:07 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:33:07 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:33:18 INFO  time: indexed workspace in 13s[0m
2024.12.24 15:35:11 INFO  compiling root (1 scala source)[0m
2024.12.24 15:35:11 INFO  time: compiled root in 0.19s[0m
2024.12.24 15:35:39 INFO  compiling root (1 scala source)[0m
2024.12.24 15:35:39 INFO  time: compiled root in 0.11s[0m
2024.12.24 15:38:31 INFO  compiling root (1 scala source)[0m
2024.12.24 15:38:31 INFO  time: compiled root in 94ms[0m
2024.12.24 15:38:50 INFO  compiling root (1 scala source)[0m
2024.12.24 15:38:50 INFO  time: compiled root in 0.11s[0m
2024.12.24 15:39:10 INFO  compiling root (1 scala source)[0m
2024.12.24 15:39:10 INFO  time: compiled root in 0.29s[0m
2024.12.24 15:39:12 INFO  compiling root (1 scala source)[0m
2024.12.24 15:39:12 INFO  time: compiled root in 0.21s[0m
2024.12.24 15:39:50 INFO  compiling root (1 scala source)[0m
2024.12.24 15:39:50 INFO  time: compiled root in 0.21s[0m
2024.12.24 15:40:09 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/sca/SoundChangeApplier.scala:111: error: [dialect scala3] end of file expected but } found
  }
  ^[0m
2024.12.24 15:40:09 INFO  compiling root (1 scala source)[0m
2024.12.24 15:40:09 INFO  time: compiled root in 93ms[0m
2024.12.24 15:41:00 INFO  compiling root (1 scala source)[0m
2024.12.24 15:41:00 INFO  time: compiled root in 0.13s[0m
2024.12.24 15:41:14 INFO  compiling root (1 scala source)[0m
2024.12.24 15:41:14 INFO  time: compiled root in 0.14s[0m
2024.12.24 15:41:17 INFO  compiling root (1 scala source)[0m
2024.12.24 15:41:17 INFO  time: compiled root in 0.16s[0m
2024.12.24 15:41:34 INFO  compiling root (2 scala sources)[0m
Dec 24, 2024 3:41:34 PM org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
WARNING: Unsupported notification method: workspace/didRenameFiles
2024.12.24 15:41:34 INFO  time: compiled root in 0.27s[0m
2024.12.24 15:41:43 INFO  compiling root (1 scala source)[0m
2024.12.24 15:41:43 INFO  time: compiled root in 0.3s[0m
2024.12.24 15:41:43 INFO  compiling root (1 scala source)[0m
2024.12.24 15:41:43 INFO  time: compiled root in 0.29s[0m
2024.12.24 15:41:51 INFO  compiling root (1 scala source)[0m
2024.12.24 15:41:51 INFO  time: compiled root in 0.15s[0m
2024.12.24 15:41:51 INFO  compiling root (1 scala source)[0m
2024.12.24 15:41:51 INFO  time: compiled root in 0.24s[0m
Dec 24, 2024 3:41:56 PM org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
WARNING: Unsupported notification method: workspace/didRenameFiles
2024.12.24 15:42:09 INFO  compiling root (2 scala sources)[0m
2024.12.24 15:42:09 INFO  time: compiled root in 0.2s[0m
2024.12.24 15:42:23 INFO  compiling root (1 scala source)[0m
2024.12.24 15:42:23 INFO  time: compiled root in 0.15s[0m
2024.12.24 15:42:26 INFO  Shutting down server[0m
2024.12.24 15:42:26 INFO  shutting down Metals[0m
2024.12.24 15:42:26 INFO  Shut down connection with build server.[0m
2024.12.24 15:42:26 INFO  Shut down connection with build server.[0m
2024.12.24 15:42:26 INFO  Shut down connection with build server.[0m
2024.12.24 15:42:53 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@48654346]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@26b8429b]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@48654346]
2024.12.24 15:42:53 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:42:53 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:42:53 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:42:53 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:42:53 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:42:53 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:42:53 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:42:53 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:42:53 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:42:53 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:42:53 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:42:53 INFO  time: Connected to build server in 0.27s[0m
2024.12.24 15:42:53 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 15:42:54 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:42:54 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:42:53 INFO  running doctor check[0m
2024.12.24 15:42:53 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
Dec 24, 2024 3:42:55 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 15:42:57 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:42:57 INFO  time: indexed workspace in 3.95s[0m
2024.12.24 15:43:09 INFO  compiling root (1 scala source)[0m
2024.12.24 15:43:09 INFO  time: compiled root in 0.16s[0m
2024.12.24 15:43:10 INFO  Shutting down server[0m
2024.12.24 15:43:10 INFO  shutting down Metals[0m
2024.12.24 15:43:10 INFO  Shut down connection with build server.[0m
2024.12.24 15:43:10 INFO  Shut down connection with build server.[0m
2024.12.24 15:43:10 INFO  Shut down connection with build server.[0m
2024.12.24 15:43:41 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@68f69bd]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@4f26e5f7]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@68f69bd]
2024.12.24 15:43:41 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:43:41 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:43:41 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:43:41 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:43:41 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:43:41 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:43:41 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:43:41 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:43:41 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:43:41 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:43:41 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:43:41 INFO  time: Connected to build server in 0.32s[0m
2024.12.24 15:43:41 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 15:43:42 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:43:42 INFO  running doctor check[0m
2024.12.24 15:43:42 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
Dec 24, 2024 3:43:45 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 15:43:46 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:43:46 INFO  time: indexed workspace in 4.07s[0m
2024.12.24 15:44:44 INFO  compiling root (1 scala source)[0m
2024.12.24 15:44:44 INFO  time: compiled root in 0.15s[0m
2024.12.24 15:44:45 INFO  Shutting down server[0m
2024.12.24 15:44:45 INFO  shutting down Metals[0m
2024.12.24 15:44:45 INFO  Shut down connection with build server.[0m
2024.12.24 15:44:45 INFO  Shut down connection with build server.[0m
2024.12.24 15:44:45 INFO  Shut down connection with build server.[0m
2024.12.24 15:45:17 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@7a72b51]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@3f0595bf]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@7a72b51]
2024.12.24 15:45:17 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:45:17 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:45:17 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:45:17 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:45:17 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:45:17 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:45:17 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:45:17 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:45:17 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:45:17 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:45:18 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:45:18 INFO  time: Connected to build server in 0.28s[0m
2024.12.24 15:45:18 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 15:45:18 INFO  running doctor check[0m
2024.12.24 15:45:18 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.24 15:45:21 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:45:21 INFO  time: indexed workspace in 3.35s[0m
Dec 24, 2024 3:45:22 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 15:45:36 INFO  compiling root (1 scala source)[0m
2024.12.24 15:45:36 INFO  time: compiled root in 0.14s[0m
2024.12.24 15:46:55 INFO  compiling root (1 scala source)[0m
2024.12.24 15:46:55 INFO  time: compiled root in 0.15s[0m
2024.12.24 15:46:56 INFO  Shutting down server[0m
2024.12.24 15:46:56 INFO  shutting down Metals[0m
2024.12.24 15:46:56 INFO  Shut down connection with build server.[0m
2024.12.24 15:46:56 INFO  Shut down connection with build server.[0m
2024.12.24 15:46:56 INFO  Shut down connection with build server.[0m
2024.12.24 15:47:15 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@58df8f76]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@116f0589]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@58df8f76]
2024.12.24 15:47:15 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:47:15 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:47:16 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:47:16 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:47:16 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:47:16 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:47:16 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:47:16 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:47:16 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:47:16 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:47:16 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:47:16 INFO  time: Connected to build server in 0.32s[0m
2024.12.24 15:47:16 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 15:47:17 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:47:16 INFO  running doctor check[0m
2024.12.24 15:47:16 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.24 15:47:20 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:47:20 INFO  time: indexed workspace in 4.27s[0m
Dec 24, 2024 3:47:21 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 15:48:00 INFO  compiling root (1 scala source)[0m
2024.12.24 15:48:00 INFO  time: compiled root in 0.17s[0m
2024.12.24 15:51:05 INFO  compiling root (1 scala source)[0m
2024.12.24 15:51:05 INFO  time: compiled root in 0.32s[0m
2024.12.24 15:52:55 INFO  compiling root (1 scala source)[0m
2024.12.24 15:52:55 INFO  time: compiled root in 0.14s[0m
2024.12.24 15:52:56 INFO  Shutting down server[0m
2024.12.24 15:52:56 INFO  shutting down Metals[0m
2024.12.24 15:52:56 INFO  Shut down connection with build server.[0m
2024.12.24 15:52:56 INFO  Shut down connection with build server.[0m
2024.12.24 15:52:56 INFO  Shut down connection with build server.[0m
2024.12.24 15:53:17 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@2c9a996b]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@2ded38f5]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@2c9a996b]
2024.12.24 15:53:17 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:53:18 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:53:18 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:53:18 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:53:18 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:53:18 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:53:18 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:53:18 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:53:18 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:53:18 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:53:18 INFO  time: Connected to build server in 0.29s[0m
2024.12.24 15:53:18 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 15:53:18 INFO  time: Imported build in 0.1s[0m
2024.12.24 15:53:18 INFO  running doctor check[0m
2024.12.24 15:53:18 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
Dec 24, 2024 3:53:20 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 15:53:22 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:53:22 INFO  time: indexed workspace in 3.68s[0m
2024.12.24 15:53:23 INFO  compiling root (1 scala source)[0m
2024.12.24 15:53:23 INFO  time: compiled root in 0.14s[0m
2024.12.24 15:53:59 INFO  compiling root (1 scala source)[0m
2024.12.24 15:53:59 INFO  time: compiled root in 0.23s[0m
2024.12.24 15:54:31 INFO  compiling root (1 scala source)[0m
2024.12.24 15:54:31 INFO  time: compiled root in 42ms[0m
2024.12.24 15:54:32 INFO  Shutting down server[0m
2024.12.24 15:54:32 INFO  shutting down Metals[0m
2024.12.24 15:54:32 INFO  Shut down connection with build server.[0m
2024.12.24 15:54:32 INFO  Shut down connection with build server.[0m
2024.12.24 15:54:32 INFO  Shut down connection with build server.[0m
2024.12.24 15:55:25 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@55403bc]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@477fdc41]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@55403bc]
2024.12.24 15:55:25 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:55:25 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:55:25 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:55:25 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:55:25 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:55:25 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:55:25 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:55:25 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:55:25 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:55:25 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:55:26 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:55:26 INFO  time: Connected to build server in 0.29s[0m
2024.12.24 15:55:26 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 15:55:26 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:55:26 INFO  running doctor check[0m
2024.12.24 15:55:26 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
Dec 24, 2024 3:55:28 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 15:55:29 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:55:29 INFO  time: indexed workspace in 4.33s[0m
2024.12.24 15:55:30 INFO  compiling root (3 scala sources)[0m
2024.12.24 15:55:30 INFO  time: compiled root in 0.19s[0m
2024.12.24 15:55:30 INFO  compiling root (3 scala sources)[0m
2024.12.24 15:55:30 INFO  time: compiled root in 0.12s[0m
2024.12.24 15:55:56 INFO  compiling root (3 scala sources)[0m
2024.12.24 15:55:56 INFO  time: compiled root in 0.11s[0m
2024.12.24 15:56:09 INFO  compiling root (3 scala sources)[0m
2024.12.24 15:56:09 INFO  time: compiled root in 94ms[0m
2024.12.24 15:56:14 INFO  Shutting down server[0m
2024.12.24 15:56:14 INFO  shutting down Metals[0m
2024.12.24 15:56:14 INFO  compiling root (3 scala sources)[0m
2024.12.24 15:56:14 INFO  Shut down connection with build server.[0m
2024.12.24 15:56:14 INFO  Shut down connection with build server.[0m
2024.12.24 15:56:14 INFO  Shut down connection with build server.[0m
Dec 24, 2024 3:56:14 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint notify
INFO: Failed to send notification message.
org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.nio.channels.AsynchronousCloseException
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:41)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.notify(RemoteEndpoint.java:135)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.sendCancelNotification(RemoteEndpoint.java:191)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:160)
	at scala.meta.internal.metals.utils.FutureWithTimeout$$anon$1.$anonfun$cancel$1(FutureWithTimeout.scala:37)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:217)
	at scala.meta.internal.metals.utils.FutureWithTimeout$$anon$1.cancel(FutureWithTimeout.scala:37)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:334)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.utils.RequestRegistry.cancel(RequestRegistry.scala:94)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:450)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:182)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:174)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.nio.channels.AsynchronousCloseException
	at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:203)
	at java.base/sun.nio.ch.SinkChannelImpl.endWrite(SinkChannelImpl.java:268)
	at java.base/sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:290)
	at java.base/sun.nio.ch.ChannelOutputStream.writeFully(ChannelOutputStream.java:68)
	at java.base/sun.nio.ch.ChannelOutputStream.write(ChannelOutputStream.java:102)
	at java.base/java.io.OutputStream.write(OutputStream.java:124)
	at java.base/sun.nio.ch.ChannelOutputStream.write(ChannelOutputStream.java:79)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:139)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:110)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:67)
	... 20 more

2024.12.24 15:56:14 INFO  Cancelling compilation on Bloop server[0m
java.util.concurrent.RejectedExecutionException: Task Future(<not completed>) rejected from java.util.concurrent.ThreadPoolExecutor@45ca843[Shutting down, pool size = 2, active threads = 2, queued tasks = 0, completed tasks = 2896]
	at java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2081)
	at java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:841)
	at java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1376)
	at scala.concurrent.impl.ExecutionContextImpl.execute(ExecutionContextImpl.scala:21)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:429)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:435)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:506)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024.12.24 15:56:28 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@5962da98]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@19c55db2]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@5962da98]
2024.12.24 15:56:30 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:56:30 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:30 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:30 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:30 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:30 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:56:30 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:56:30 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:56:30 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:56:30 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:56:31 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:56:30 INFO  time: Connected to build server in 0.33s[0m
2024.12.24 15:56:30 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 15:56:31 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:31 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:31 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:31 INFO  running doctor check[0m
2024.12.24 15:56:31 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
Dec 24, 2024 3:56:32 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 15:56:35 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:56:35 INFO  time: indexed workspace in 4.75s[0m
2024.12.24 15:56:36 INFO  compiling root (3 scala sources)[0m
2024.12.24 15:56:36 INFO  time: compiled root in 0.24s[0m
2024.12.24 15:56:36 INFO  compiling root (3 scala sources)[0m
2024.12.24 15:56:36 INFO  time: compiled root in 0.18s[0m
Dec 24, 2024 3:56:39 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: An unexpected exception occurred while executing jsonrpc method public abstract java.util.concurrent.CompletableFuture scala.meta.metals.lsp.TextDocumentService.documentHighlights(org.eclipse.lsp4j.TextDocumentPositionParams)
java.lang.IllegalStateException: An unexpected exception occurred while executing jsonrpc method public abstract java.util.concurrent.CompletableFuture scala.meta.metals.lsp.TextDocumentService.documentHighlights(org.eclipse.lsp4j.TextDocumentPositionParams)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:73)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:128)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:271)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:201)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:185)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:97)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:114)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.nio.file.NoSuchFileException: /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala
	at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:106)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
	at java.base/sun.nio.fs.UnixPath.toRealPath(UnixPath.java:834)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.dealias(ScalametaCommonEnrichments.scala:330)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionURIMtags.toAbsolutePath(MtagsEnrichments.scala:132)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:187)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:773)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:770)
	at scala.meta.internal.metals.Compilers.sourceAdjustments(Compilers.scala:1407)
	at scala.meta.internal.metals.Compilers.sourceAdjustments(Compilers.scala:1370)
	at scala.meta.internal.metals.Compilers.$anonfun$withPCAndAdjustLsp$3(Compilers.scala:1270)
	at scala.Option.flatMap(Option.scala:283)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:1266)
	at scala.meta.internal.metals.Compilers.documentHighlight(Compilers.scala:735)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$documentHighlights$2(MetalsLspService.scala:1044)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.documentHighlights(MetalsLspService.scala:1043)
	at scala.meta.internal.metals.WorkspaceLspService.documentHighlights(WorkspaceLspService.scala:455)
	at scala.meta.metals.lsp.DelegatingScalaService.documentHighlights(DelegatingScalaService.scala:87)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:65)
	... 11 more

2024.12.24 15:56:39 INFO  Shutting down server[0m
2024.12.24 15:56:39 INFO  shutting down Metals[0m
2024.12.24 15:56:39 INFO  compiling root (3 scala sources)[0m
2024.12.24 15:56:39 INFO  Shut down connection with build server.[0m
2024.12.24 15:56:39 INFO  Shut down connection with build server.[0m
2024.12.24 15:56:39 INFO  Shut down connection with build server.[0m
Dec 24, 2024 3:56:39 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint notify
INFO: Failed to send notification message.
org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.nio.channels.AsynchronousCloseException
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:41)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.notify(RemoteEndpoint.java:135)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.sendCancelNotification(RemoteEndpoint.java:191)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:160)
	at scala.meta.internal.metals.utils.FutureWithTimeout$$anon$1.$anonfun$cancel$1(FutureWithTimeout.scala:37)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:217)
	at scala.meta.internal.metals.utils.FutureWithTimeout$$anon$1.cancel(FutureWithTimeout.scala:37)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:334)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.utils.RequestRegistry.cancel(RequestRegistry.scala:94)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:450)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:182)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:174)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.nio.channels.AsynchronousCloseException
	at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:203)
	at java.base/sun.nio.ch.SinkChannelImpl.endWrite(SinkChannelImpl.java:268)
	at java.base/sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:290)
	at java.base/sun.nio.ch.ChannelOutputStream.writeFully(ChannelOutputStream.java:68)
	at java.base/sun.nio.ch.ChannelOutputStream.write(ChannelOutputStream.java:102)
	at java.base/java.io.OutputStream.write(OutputStream.java:124)
	at java.base/sun.nio.ch.ChannelOutputStream.write(ChannelOutputStream.java:79)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:139)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:110)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:67)
	... 20 more

2024.12.24 15:56:39 INFO  Cancelling compilation on Bloop server[0m
java.util.concurrent.RejectedExecutionException: Task Future(<not completed>) rejected from java.util.concurrent.ThreadPoolExecutor@45ca843[Shutting down, pool size = 5, active threads = 2, queued tasks = 0, completed tasks = 993]
	at java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2081)
	at java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:841)
	at java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1376)
	at scala.concurrent.impl.ExecutionContextImpl.execute(ExecutionContextImpl.scala:21)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:429)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:435)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:506)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024.12.24 15:56:39 INFO  unable to setup persistent H2 database with AUTO_SERVER=true, falling back to AUTO_SERVER=false.[0m
2024.12.24 15:56:45 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@32cb531e]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@58320121]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@32cb531e]
2024.12.24 15:56:48 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:56:48 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:48 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:48 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:48 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:48 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:56:48 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:56:48 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:56:48 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:56:48 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:56:48 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:56:48 INFO  time: Connected to build server in 0.31s[0m
2024.12.24 15:56:48 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:48 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:48 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:48 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
Dec 24, 2024 3:56:49 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 15:56:48 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:56:48 INFO  running doctor check[0m
2024.12.24 15:56:48 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.24 15:56:50 INFO  Shutting down server[0m
2024.12.24 15:56:50 INFO  shutting down Metals[0m
2024.12.24 15:56:50 INFO  compiling root (3 scala sources)[0m
2024.12.24 15:56:50 INFO  Shut down connection with build server.[0m
2024.12.24 15:56:50 INFO  Shut down connection with build server.[0m
2024.12.24 15:56:50 INFO  Shut down connection with build server.[0m
Dec 24, 2024 3:56:50 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint notify
INFO: Failed to send notification message.
org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.nio.channels.AsynchronousCloseException
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:41)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.notify(RemoteEndpoint.java:135)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.sendCancelNotification(RemoteEndpoint.java:191)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:160)
	at scala.meta.internal.metals.utils.FutureWithTimeout$$anon$1.$anonfun$cancel$1(FutureWithTimeout.scala:37)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:217)
	at scala.meta.internal.metals.utils.FutureWithTimeout$$anon$1.cancel(FutureWithTimeout.scala:37)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:334)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.utils.RequestRegistry.cancel(RequestRegistry.scala:94)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:450)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:182)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:174)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.nio.channels.AsynchronousCloseException
	at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:203)
	at java.base/sun.nio.ch.SinkChannelImpl.endWrite(SinkChannelImpl.java:268)
	at java.base/sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:290)
	at java.base/sun.nio.ch.ChannelOutputStream.writeFully(ChannelOutputStream.java:68)
	at java.base/sun.nio.ch.ChannelOutputStream.write(ChannelOutputStream.java:102)
	at java.base/java.io.OutputStream.write(OutputStream.java:124)
	at java.base/sun.nio.ch.ChannelOutputStream.write(ChannelOutputStream.java:79)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:139)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:110)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:67)
	... 20 more

2024.12.24 15:56:50 INFO  Cancelling compilation on Bloop server[0m
java.util.concurrent.RejectedExecutionException: Task Future(<not completed>) rejected from java.util.concurrent.ThreadPoolExecutor@45ca843[Shutting down, pool size = 6, active threads = 4, queued tasks = 0, completed tasks = 344]
	at java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2081)
	at java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:841)
	at java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1376)
	at scala.concurrent.impl.ExecutionContextImpl.execute(ExecutionContextImpl.scala:21)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:429)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:435)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:506)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024.12.24 15:57:19 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@3a95f25a]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@594d1485]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@3a95f25a]
2024.12.24 15:57:23 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:57:23 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:57:23 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:57:23 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:57:23 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:57:23 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:57:23 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:57:23 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:57:23 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:57:23 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:57:23 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:57:23 INFO  time: Connected to build server in 0.28s[0m
2024.12.24 15:57:23 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 15:57:24 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:57:23 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
Dec 24, 2024 3:57:24 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 15:57:23 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:57:24 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:57:24 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:57:23 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:57:24 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:57:23 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:57:23 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:57:24 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:57:24 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:57:24 INFO  running doctor check[0m
2024.12.24 15:57:24 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.24 15:57:25 INFO  Report absolute-path: ### java.nio.file.NoSuchFileException: /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala

Uri: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala


#### Error stacktrace:

```
java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)
	java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:106)
	java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
	java.base/sun.nio.fs.UnixPath.toRealPath(UnixPath.java:834)
	scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.dealias(ScalametaCommonEnrichments.scala:330)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionURIMtags.toAbsolutePath(MtagsEnrichments.scala:132)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:187)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:773)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:770)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:756)
	scala.meta.internal.metals.WorkspaceLspService.getServiceForOpt(WorkspaceLspService.scala:308)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:317)
	scala.meta.internal.metals.WorkspaceLspService.documentHighlights(WorkspaceLspService.scala:455)
	scala.meta.metals.lsp.DelegatingScalaService.documentHighlights(DelegatingScalaService.scala:87)
	java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	java.base/java.lang.reflect.Method.invoke(Method.java:580)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:128)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:271)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:201)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:185)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:97)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:114)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	java.base/java.lang.Thread.run(Thread.java:1583)
```
[0m
2024.12.24 15:57:25 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:57:25 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitisation.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:57:26 INFO  compiling root (3 scala sources)[0m
2024.12.24 15:57:25 INFO  Shutting down server[0m
2024.12.24 15:57:25 INFO  shutting down Metals[0m
2024.12.24 15:57:26 INFO  Shut down connection with build server.[0m
2024.12.24 15:57:26 INFO  Shut down connection with build server.[0m
2024.12.24 15:57:26 INFO  Shut down connection with build server.[0m
Dec 24, 2024 3:57:26 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint notify
INFO: Failed to send notification message.
org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.nio.channels.AsynchronousCloseException
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:41)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.notify(RemoteEndpoint.java:135)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.sendCancelNotification(RemoteEndpoint.java:191)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:160)
	at scala.meta.internal.metals.utils.FutureWithTimeout$$anon$1.$anonfun$cancel$1(FutureWithTimeout.scala:37)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:217)
	at scala.meta.internal.metals.utils.FutureWithTimeout$$anon$1.cancel(FutureWithTimeout.scala:37)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:334)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.utils.RequestRegistry.cancel(RequestRegistry.scala:94)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:450)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:182)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:174)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.nio.channels.AsynchronousCloseException
	at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:203)
	at java.base/sun.nio.ch.SinkChannelImpl.endWrite(SinkChannelImpl.java:268)
	at java.base/sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:290)
	at java.base/sun.nio.ch.ChannelOutputStream.writeFully(ChannelOutputStream.java:68)
	at java.base/sun.nio.ch.ChannelOutputStream.write(ChannelOutputStream.java:102)
	at java.base/java.io.OutputStream.write(OutputStream.java:124)
	at java.base/sun.nio.ch.ChannelOutputStream.write(ChannelOutputStream.java:79)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:139)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:110)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:67)
	... 20 more

2024.12.24 15:57:26 INFO  Cancelling compilation on Bloop server[0m
java.util.concurrent.RejectedExecutionException: Task Future(<not completed>) rejected from java.util.concurrent.ThreadPoolExecutor@45ca843[Shutting down, pool size = 7, active threads = 3, queued tasks = 0, completed tasks = 339]
	at java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2081)
	at java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:841)
	at java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1376)
	at scala.concurrent.impl.ExecutionContextImpl.execute(ExecutionContextImpl.scala:21)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:429)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:435)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:506)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024.12.24 15:57:27 INFO  unable to setup persistent H2 database with AUTO_SERVER=true, falling back to AUTO_SERVER=false.[0m
2024.12.24 15:58:08 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@36f2ab5c]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@2ad14c7]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@36f2ab5c]
2024.12.24 15:58:11 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:58:11 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:58:11 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:58:11 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:58:11 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:58:11 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:58:11 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:58:11 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:58:11 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:58:11 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:58:11 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:58:11 INFO  time: Connected to build server in 0.44s[0m
2024.12.24 15:58:11 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 15:58:12 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:58:12 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:58:12 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:58:12 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:58:12 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:58:12 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:58:12 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:58:12 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:58:12 INFO  running doctor check[0m
2024.12.24 15:58:12 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
Dec 24, 2024 3:58:12 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 15:58:13 INFO  compiling root (3 scala sources)[0m
2024.12.24 15:58:13 INFO  time: compiled root in 0.3s[0m
2024.12.24 15:58:14 INFO  compiling root (3 scala sources)[0m
2024.12.24 15:58:14 INFO  time: compiled root in 0.19s[0m
2024.12.24 15:58:15 INFO  Shutting down server[0m
2024.12.24 15:58:15 INFO  shutting down Metals[0m
2024.12.24 15:58:15 INFO  Shut down connection with build server.[0m
2024.12.24 15:58:15 INFO  Shut down connection with build server.[0m
2024.12.24 15:58:15 INFO  Shut down connection with build server.[0m
2024.12.24 15:58:15 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
java.util.concurrent.RejectedExecutionException: Task Future(<not completed>) rejected from java.util.concurrent.ThreadPoolExecutor@45ca843[Shutting down, pool size = 3, active threads = 3, queued tasks = 0, completed tasks = 505]
	at java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2081)
	at java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:841)
	at java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1376)
	at scala.concurrent.impl.ExecutionContextImpl.execute(ExecutionContextImpl.scala:21)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:429)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:506)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024.12.24 15:58:15 INFO  unable to setup persistent H2 database with AUTO_SERVER=true, falling back to AUTO_SERVER=false.[0m
2024.12.24 15:58:15 INFO  unable to setup persistent H2 database with AUTO_SERVER=true, falling back to AUTO_SERVER=false.[0m
2024.12.24 15:58:34 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@116c911f]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@7b5ef563]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@116c911f]
2024.12.24 15:58:37 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:58:37 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:58:37 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:58:37 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:58:37 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:58:37 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:58:37 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:58:37 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:58:37 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:58:37 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:58:37 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:58:37 INFO  time: Connected to build server in 0.35s[0m
2024.12.24 15:58:37 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 15:58:38 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:58:38 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:58:38 INFO  running doctor check[0m
2024.12.24 15:58:38 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.24 15:58:42 INFO  compiling root (3 scala sources)[0m
2024.12.24 15:58:42 INFO  time: compiled root in 0.2s[0m
Dec 24, 2024 3:58:43 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 15:58:43 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:58:43 INFO  time: indexed workspace in 5.94s[0m
2024.12.24 15:58:44 INFO  compiling root (3 scala sources)[0m
2024.12.24 15:58:44 INFO  time: compiled root in 0.15s[0m
2024.12.24 15:58:44 INFO  compiling root (3 scala sources)[0m
2024.12.24 15:58:44 INFO  time: compiled root in 0.14s[0m
2024.12.24 15:59:35 INFO  compiling root (3 scala sources)[0m
2024.12.24 15:59:35 INFO  time: compiled root in 0.11s[0m
2024.12.24 15:59:45 INFO  Shutting down server[0m
2024.12.24 15:59:45 INFO  shutting down Metals[0m
2024.12.24 15:59:45 INFO  compiling root (3 scala sources)[0m
2024.12.24 15:59:45 INFO  Shut down connection with build server.[0m
2024.12.24 15:59:45 INFO  Shut down connection with build server.[0m
2024.12.24 15:59:45 INFO  Shut down connection with build server.[0m
Dec 24, 2024 3:59:45 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint notify
INFO: Failed to send notification message.
org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.nio.channels.AsynchronousCloseException
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:41)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.notify(RemoteEndpoint.java:135)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.sendCancelNotification(RemoteEndpoint.java:191)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:160)
	at scala.meta.internal.metals.utils.FutureWithTimeout$$anon$1.$anonfun$cancel$1(FutureWithTimeout.scala:37)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:217)
	at scala.meta.internal.metals.utils.FutureWithTimeout$$anon$1.cancel(FutureWithTimeout.scala:37)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:334)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.utils.RequestRegistry.cancel(RequestRegistry.scala:94)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:450)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:182)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:174)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.nio.channels.AsynchronousCloseException
	at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:203)
	at java.base/sun.nio.ch.SinkChannelImpl.endWrite(SinkChannelImpl.java:268)
	at java.base/sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:290)
	at java.base/sun.nio.ch.ChannelOutputStream.writeFully(ChannelOutputStream.java:68)
	at java.base/sun.nio.ch.ChannelOutputStream.write(ChannelOutputStream.java:102)
	at java.base/java.io.OutputStream.write(OutputStream.java:124)
	at java.base/sun.nio.ch.ChannelOutputStream.write(ChannelOutputStream.java:79)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:139)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:110)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:67)
	... 20 more

2024.12.24 15:59:45 INFO  Cancelling compilation on Bloop server[0m
java.util.concurrent.RejectedExecutionException: Task Future(<not completed>) rejected from java.util.concurrent.ThreadPoolExecutor@45ca843[Shutting down, pool size = 2, active threads = 2, queued tasks = 0, completed tasks = 819]
	at java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2081)
	at java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:841)
	at java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1376)
	at scala.concurrent.impl.ExecutionContextImpl.execute(ExecutionContextImpl.scala:21)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:429)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:435)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:506)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024.12.24 15:59:45 INFO  unable to setup persistent H2 database with AUTO_SERVER=true, falling back to AUTO_SERVER=false.[0m
2024.12.24 15:59:54 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@58b9aedf]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@742f3da0]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@58b9aedf]
2024.12.24 15:59:56 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 15:59:56 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:59:56 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:59:56 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:59:56 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:59:57 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:59:57 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:59:57 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:59:57 INFO  Attempting to connect to the build server...[0m
2024.12.24 15:59:57 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:59:57 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 15:59:57 INFO  time: Connected to build server in 0.35s[0m
2024.12.24 15:59:57 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 15:59:57 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:59:57 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:59:57 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:59:57 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 15:59:57 INFO  running doctor check[0m
2024.12.24 15:59:57 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.24 16:00:01 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 16:00:01 INFO  time: indexed workspace in 3.82s[0m
2024.12.24 16:00:01 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:00:01 INFO  time: compiled root in 0.28s[0m
Dec 24, 2024 4:00:02 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 16:00:01 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:00:01 INFO  time: compiled root in 0.23s[0m
2024.12.24 16:00:04 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:00:04 INFO  time: compiled root in 0.11s[0m
2024.12.24 16:00:06 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:00:06 INFO  time: compiled root in 0.11s[0m
2024.12.24 16:00:10 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:00:10 INFO  time: compiled root in 0.1s[0m
2024.12.24 16:00:21 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:00:21 INFO  time: compiled root in 0.12s[0m
2024.12.24 16:00:28 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:00:28 INFO  time: compiled root in 0.11s[0m
2024.12.24 16:00:35 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:00:35 INFO  time: compiled root in 97ms[0m
2024.12.24 16:00:37 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:00:37 INFO  time: compiled root in 0.11s[0m
2024.12.24 16:00:49 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:00:49 INFO  time: compiled root in 0.26s[0m
2024.12.24 16:00:59 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:00:59 INFO  time: compiled root in 95ms[0m
2024.12.24 16:01:07 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:01:07 INFO  time: compiled root in 0.1s[0m
2024.12.24 16:01:07 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:01:08 INFO  time: compiled root in 0.11s[0m
2024.12.24 16:01:09 INFO  Shutting down server[0m
2024.12.24 16:01:09 INFO  shutting down Metals[0m
2024.12.24 16:01:09 INFO  Shut down connection with build server.[0m
2024.12.24 16:01:09 INFO  Shut down connection with build server.[0m
2024.12.24 16:01:09 INFO  Shut down connection with build server.[0m
2024.12.24 16:02:03 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@25ceca63]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@7714387b]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@25ceca63]
2024.12.24 16:02:03 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 16:02:03 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 16:02:03 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 16:02:03 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 16:02:03 INFO  Attempting to connect to the build server...[0m
2024.12.24 16:02:03 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 16:02:03 INFO  Attempting to connect to the build server...[0m
2024.12.24 16:02:03 INFO  Attempting to connect to the build server...[0m
2024.12.24 16:02:03 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 16:02:04 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 16:02:04 INFO  time: Connected to build server in 0.27s[0m
2024.12.24 16:02:04 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 16:02:04 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 16:02:03 INFO  running doctor check[0m
2024.12.24 16:02:03 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.24 16:02:07 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 16:02:07 INFO  time: indexed workspace in 3.39s[0m
2024.12.24 16:02:08 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:02:08 INFO  time: compiled root in 0.31s[0m
Dec 24, 2024 4:02:08 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 16:02:08 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:02:08 INFO  time: compiled root in 0.15s[0m
2024.12.24 16:02:12 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:02:12 INFO  time: compiled root in 0.16s[0m
2024.12.24 16:02:37 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:02:37 INFO  time: compiled root in 0.23s[0m
2024.12.24 16:02:38 INFO  Shutting down server[0m
2024.12.24 16:02:38 INFO  shutting down Metals[0m
2024.12.24 16:02:38 INFO  Shut down connection with build server.[0m
2024.12.24 16:02:38 INFO  Shut down connection with build server.[0m
2024.12.24 16:02:38 INFO  Shut down connection with build server.[0m
2024.12.24 16:03:01 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@1d2607af]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@2bd892c5]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@1d2607af]
2024.12.24 16:03:01 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 16:03:02 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 16:03:02 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 16:03:02 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 16:03:02 INFO  Attempting to connect to the build server...[0m
2024.12.24 16:03:02 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 16:03:02 INFO  Attempting to connect to the build server...[0m
2024.12.24 16:03:02 INFO  Attempting to connect to the build server...[0m
2024.12.24 16:03:02 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 16:03:02 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 16:03:02 INFO  time: Connected to build server in 0.3s[0m
2024.12.24 16:03:02 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 16:03:01 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 16:03:02 INFO  running doctor check[0m
2024.12.24 16:03:02 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.24 16:03:04 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:03:04 INFO  time: compiled root in 0.67s[0m
Dec 24, 2024 4:03:04 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 16:03:06 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 16:03:06 INFO  time: indexed workspace in 4.28s[0m
2024.12.24 16:03:07 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:03:07 INFO  time: compiled root in 0.29s[0m
2024.12.24 16:03:07 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:03:07 INFO  time: compiled root in 0.35s[0m
2024.12.24 16:03:07 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:03:08 INFO  time: compiled root in 0.34s[0m
2024.12.24 16:03:47 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:03:47 INFO  time: compiled root in 0.11s[0m
2024.12.24 16:04:00 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:04:00 INFO  time: compiled root in 94ms[0m
2024.12.24 16:04:04 INFO  compiling root (3 scala sources)[0m
2024.12.24 16:04:04 INFO  time: compiled root in 0.26s[0m
2024.12.24 21:47:10 INFO  compiling root (3 scala sources)[0m
2024.12.24 21:47:10 INFO  time: compiled root in 93ms[0m
2024.12.24 21:47:14 INFO  compiling root (3 scala sources)[0m
2024.12.24 21:47:14 INFO  time: compiled root in 0.12s[0m
2024.12.24 21:47:14 INFO  compiling root (3 scala sources)[0m
2024.12.24 21:47:14 INFO  time: compiled root in 0.12s[0m
2024.12.24 21:47:18 INFO  compiling root (3 scala sources)[0m
2024.12.24 21:47:18 INFO  time: compiled root in 91ms[0m
2024.12.24 21:47:22 INFO  compiling root (3 scala sources)[0m
2024.12.24 21:47:22 INFO  time: compiled root in 0.12s[0m
2024.12.24 21:47:26 INFO  compiling root (3 scala sources)[0m
2024.12.24 21:47:26 INFO  time: compiled root in 94ms[0m
2024.12.24 21:47:37 INFO  compiling root (3 scala sources)[0m
2024.12.24 21:47:37 INFO  time: compiled root in 0.1s[0m
2024.12.24 21:47:39 INFO  compiling root (3 scala sources)[0m
2024.12.24 21:47:39 INFO  time: compiled root in 0.22s[0m
2024.12.24 21:47:50 INFO  compiling root (3 scala sources)[0m
2024.12.24 21:47:50 INFO  time: compiled root in 93ms[0m
2024.12.24 21:47:53 INFO  compiling root (3 scala sources)[0m
2024.12.24 21:47:53 INFO  time: compiled root in 91ms[0m
2024.12.24 21:47:55 INFO  compiling root (3 scala sources)[0m
2024.12.24 21:47:55 INFO  time: compiled root in 0.1s[0m
2024.12.24 21:47:56 INFO  Shutting down server[0m
2024.12.24 21:47:56 INFO  shutting down Metals[0m
2024.12.24 21:47:56 INFO  Shut down connection with build server.[0m
2024.12.24 21:47:56 INFO  Shut down connection with build server.[0m
2024.12.24 21:47:56 INFO  Shut down connection with build server.[0m
2024.12.24 21:48:19 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@42284706]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@75d4ffe7]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@42284706]
2024.12.24 21:48:19 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 21:48:20 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:48:20 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:48:20 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:48:20 INFO  Attempting to connect to the build server...[0m
2024.12.24 21:48:20 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 21:48:20 INFO  Attempting to connect to the build server...[0m
2024.12.24 21:48:20 INFO  Attempting to connect to the build server...[0m
2024.12.24 21:48:20 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 21:48:20 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 21:48:20 INFO  time: Connected to build server in 0.28s[0m
2024.12.24 21:48:20 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 21:48:21 INFO  running doctor check[0m
2024.12.24 21:48:21 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.24 21:48:23 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 21:48:24 INFO  time: indexed workspace in 3.77s[0m
2024.12.24 21:48:25 INFO  compiling root (3 scala sources)[0m
2024.12.24 21:48:25 INFO  time: compiled root in 0.36s[0m
Dec 24, 2024 9:48:25 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 21:48:25 INFO  compiling root (3 scala sources)[0m
2024.12.24 21:48:25 INFO  time: compiled root in 0.2s[0m
2024.12.24 21:48:55 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@1509283f]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@3045c2a3]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@1509283f]
2024.12.24 21:48:55 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 21:48:55 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:48:55 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:48:55 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:48:55 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:48:55 INFO  Attempting to connect to the build server...[0m
2024.12.24 21:48:56 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 21:48:56 INFO  Attempting to connect to the build server...[0m
2024.12.24 21:48:56 INFO  Attempting to connect to the build server...[0m
2024.12.24 21:48:56 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 21:48:56 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 21:48:56 INFO  time: Connected to build server in 0.3s[0m
2024.12.24 21:48:56 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 21:48:56 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:48:56 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:48:56 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:48:56 INFO  running doctor check[0m
2024.12.24 21:48:56 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
Dec 24, 2024 9:48:58 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 21:49:00 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 21:49:01 INFO  time: indexed workspace in 4.77s[0m
2024.12.24 21:49:01 INFO  compiling root (3 scala sources)[0m
2024.12.24 21:49:01 INFO  time: compiled root in 0.2s[0m
2024.12.24 21:49:01 INFO  compiling root (3 scala sources)[0m
2024.12.24 21:49:01 INFO  time: compiled root in 0.12s[0m
2024.12.24 21:49:10 INFO  compiling root (3 scala sources)[0m
2024.12.24 21:49:10 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 14.219s)[0m
2024.12.24 21:49:10 INFO  compiling root (3 scala sources)[0m
2024.12.24 21:49:10 INFO  time: compiled root in 0.45s[0m
2024.12.24 21:49:10 INFO  time: compiled root in 0.48s[0m
2024.12.24 21:49:12 INFO  Shutting down server[0m
2024.12.24 21:49:12 INFO  shutting down Metals[0m
2024.12.24 21:49:12 INFO  Shut down connection with build server.[0m
2024.12.24 21:49:12 INFO  Shut down connection with build server.[0m
2024.12.24 21:49:12 INFO  Shut down connection with build server.[0m
2024.12.24 21:49:26 INFO  Shutting down server[0m
2024.12.24 21:49:26 INFO  shutting down Metals[0m
2024.12.24 21:49:26 INFO  Shut down connection with build server.[0m
2024.12.24 21:49:26 INFO  Shut down connection with build server.[0m
2024.12.24 21:49:26 INFO  Shut down connection with build server.[0m
2024.12.24 21:49:50 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@43075e7a]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@31ed722c]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@43075e7a]
2024.12.24 21:49:50 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 21:49:51 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:49:51 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:49:51 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:49:51 INFO  Attempting to connect to the build server...[0m
2024.12.24 21:49:51 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 21:49:51 INFO  Attempting to connect to the build server...[0m
2024.12.24 21:49:51 INFO  Attempting to connect to the build server...[0m
2024.12.24 21:49:51 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 21:49:51 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 21:49:51 INFO  time: Connected to build server in 0.31s[0m
2024.12.24 21:49:51 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 21:49:52 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:49:52 INFO  running doctor check[0m
2024.12.24 21:49:52 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.24 21:49:55 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
Dec 24, 2024 9:49:56 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 21:49:55 INFO  time: indexed workspace in 3.93s[0m
2024.12.24 21:54:38 INFO  compiling root (1 scala source)[0m
2024.12.24 21:54:38 INFO  time: compiled root in 0.19s[0m
2024.12.24 21:54:39 INFO  Shutting down server[0m
2024.12.24 21:54:39 INFO  shutting down Metals[0m
2024.12.24 21:54:39 INFO  Shut down connection with build server.[0m
2024.12.24 21:54:39 INFO  Shut down connection with build server.[0m
2024.12.24 21:54:39 INFO  Shut down connection with build server.[0m
2024.12.24 21:55:29 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@4019724e]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@614607b7]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@4019724e]
2024.12.24 21:55:29 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 21:55:29 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:55:29 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:55:29 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:55:29 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:55:29 INFO  Attempting to connect to the build server...[0m
2024.12.24 21:55:29 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 21:55:29 INFO  Attempting to connect to the build server...[0m
2024.12.24 21:55:29 INFO  Attempting to connect to the build server...[0m
2024.12.24 21:55:30 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 21:55:29 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 21:55:29 INFO  time: Connected to build server in 0.3s[0m
2024.12.24 21:55:29 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 21:55:30 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:55:30 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:55:30 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:55:29 INFO  running doctor check[0m
2024.12.24 21:55:29 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.24 21:55:34 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 21:55:34 INFO  time: indexed workspace in 3.92s[0m
Dec 24, 2024 9:55:34 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5
2024.12.24 21:57:51 INFO  compiling root (1 scala source)[0m
2024.12.24 21:57:51 INFO  time: compiled root in 0.11s[0m
2024.12.24 21:57:52 INFO  Shutting down server[0m
2024.12.24 21:57:52 INFO  shutting down Metals[0m
2024.12.24 21:57:52 INFO  Shut down connection with build server.[0m
2024.12.24 21:57:52 INFO  Shut down connection with build server.[0m
2024.12.24 21:57:52 INFO  Shut down connection with build server.[0m
2024.12.24 21:58:15 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@4cc8de8]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@3d50924]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@4cc8de8]
2024.12.24 21:58:15 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 21:58:15 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:58:15 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:58:15 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:58:15 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:58:16 INFO  Attempting to connect to the build server...[0m
2024.12.24 21:58:16 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 21:58:16 INFO  Attempting to connect to the build server...[0m
2024.12.24 21:58:16 INFO  Attempting to connect to the build server...[0m
2024.12.24 21:58:16 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 21:58:16 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 21:58:16 INFO  time: Connected to build server in 0.32s[0m
2024.12.24 21:58:16 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 21:58:16 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:58:16 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:58:16 INFO  running doctor check[0m
2024.12.24 21:58:16 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.24 21:58:19 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 21:58:19 INFO  time: indexed workspace in 3.52s[0m
2024.12.24 21:58:20 INFO  compiling root (1 scala source)[0m
2024.12.24 21:58:20 INFO  time: compiled root in 0.23s[0m
Dec 24, 2024 9:58:20 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 21:58:20 INFO  compiling root (1 scala source)[0m
2024.12.24 21:58:20 INFO  time: compiled root in 0.11s[0m
2024.12.24 21:58:25 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala:11: error: [dialect scala3] expected template body
):
  ^[0m
2024.12.24 21:58:25 INFO  compiling root (1 scala source)[0m
2024.12.24 21:58:25 INFO  time: compiled root in 82ms[0m
2024.12.24 21:58:25 INFO  Shutting down server[0m
2024.12.24 21:58:25 INFO  shutting down Metals[0m
2024.12.24 21:58:26 INFO  Shut down connection with build server.[0m
2024.12.24 21:58:26 INFO  Shut down connection with build server.[0m
2024.12.24 21:58:26 INFO  Shut down connection with build server.[0m
2024.12.24 21:58:48 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@3897689]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@410a9c8b]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@3897689]
2024.12.24 21:58:48 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 21:58:48 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:58:48 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:58:48 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:58:48 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:58:48 INFO  Attempting to connect to the build server...[0m
2024.12.24 21:58:49 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 21:58:49 INFO  Attempting to connect to the build server...[0m
2024.12.24 21:58:49 INFO  Attempting to connect to the build server...[0m
2024.12.24 21:58:49 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 21:58:49 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 21:58:49 INFO  time: Connected to build server in 0.28s[0m
2024.12.24 21:58:49 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 21:58:49 INFO  time: Imported build in 0.11s[0m
2024.12.24 21:58:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:58:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:58:49 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 21:58:49 INFO  running doctor check[0m
2024.12.24 21:58:49 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
Dec 24, 2024 9:58:50 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 21:58:52 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 21:58:52 INFO  time: indexed workspace in 3.88s[0m
2024.12.24 21:58:53 INFO  compiling root (1 scala source)[0m
2024.12.24 21:58:53 INFO  time: compiled root in 0.21s[0m
2024.12.24 21:58:53 INFO  compiling root (1 scala source)[0m
2024.12.24 21:58:53 INFO  time: compiled root in 0.16s[0m
2024.12.24 21:59:03 INFO  compiling root (1 scala source)[0m
2024.12.24 21:59:03 INFO  time: compiled root in 0.21s[0m
2024.12.24 21:59:32 INFO  compiling root (1 scala source)[0m
2024.12.24 21:59:32 INFO  time: compiled root in 0.21s[0m
2024.12.24 22:00:34 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@3370dffd]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@25c44316]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@3370dffd]
2024.12.24 22:00:36 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 22:00:39 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:00:41 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:00:41 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:00:41 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:00:41 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:00:41 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:00:41 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:00:41 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:00:41 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:00:41 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:00:41 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:00:41 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:00:41 INFO  Attempting to connect to the build server...[0m
2024.12.24 22:00:44 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:00:44 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:00:44 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:00:44 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:00:44 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:00:44 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 22:00:44 INFO  Attempting to connect to the build server...[0m
2024.12.24 22:00:46 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:00:46 INFO  Attempting to connect to the build server...[0m
2024.12.24 22:00:46 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 22:00:46 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 22:00:46 INFO  time: Connected to build server in 4.7s[0m
2024.12.24 22:00:46 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 22:00:48 INFO  running doctor check[0m
2024.12.24 22:00:48 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.24 22:00:55 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 22:00:57 INFO  compiling root (1 scala source)[0m
2024.12.24 22:00:57 INFO  time: compiled root in 0.43s[0m
2024.12.24 22:02:51 INFO  Shutting down server[0m
2024.12.24 22:02:51 INFO  shutting down Metals[0m
2024.12.24 22:03:24 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
Exception in thread "bsp-server-to-client" java.lang.OutOfMemoryError: Java heap space
java.lang.NullPointerException
	at java.base/java.util.Objects.requireNonNull(Objects.java:233)
	at java.base/sun.nio.fs.UnixFileSystem.getPath(UnixFileSystem.java:296)
	at java.base/java.nio.file.Path.of(Path.java:148)
	at java.base/java.nio.file.Paths.get(Paths.java:69)
	at com.swoval.files.ApplePathWatcher$1.accept(ApplePathWatcher.java:268)
	at com.swoval.files.ApplePathWatcher$1.accept(ApplePathWatcher.java:261)
	at com.swoval.files.apple.FileEventMonitorImpl$WrappedConsumer$1.run(FileEventMonitors.java:178)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Exception in thread "H2 TCP Server (tcp://localhost:58820)" java.lang.OutOfMemoryError: Java heap space
2024.12.24 22:04:28 INFO  compiling root (1 scala source)[0m
2024.12.24 22:04:28 INFO  Shut down connection with build server.[0m
2024.12.24 22:04:28 INFO  Shut down connection with build server.[0m
2024.12.24 22:04:28 INFO  Shut down connection with build server.[0m
Exception in thread "com.swoval.files.apple.FileEventsMonitor.runloop" java.lang.OutOfMemoryError: Java heap space
2024.12.24 22:04:28Dec 24, 2024 10:04:28 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint notify
INFO: Failed to send notification message.
org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.nio.channels.AsynchronousCloseException
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:41)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.notify(RemoteEndpoint.java:135)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.sendCancelNotification(RemoteEndpoint.java:191)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:160)
	at scala.meta.internal.metals.utils.FutureWithTimeout$$anon$1.$anonfun$cancel$1(FutureWithTimeout.scala:37)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:217)
	at scala.meta.internal.metals.utils.FutureWithTimeout$$anon$1.cancel(FutureWithTimeout.scala:37)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:334)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.utils.RequestRegistry.cancel(RequestRegistry.scala:94)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:450)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:182)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:174)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.nio.channels.AsynchronousCloseException
	at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:203)
	at java.base/sun.nio.ch.SinkChannelImpl.endWrite(SinkChannelImpl.java:268)
	at java.base/sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:290)
	at java.base/sun.nio.ch.ChannelOutputStream.writeFully(ChannelOutputStream.java:68)
	at java.base/sun.nio.ch.ChannelOutputStream.write(ChannelOutputStream.java:102)
	at java.base/java.io.OutputStream.write(OutputStream.java:124)
	at java.base/sun.nio.ch.ChannelOutputStream.write(ChannelOutputStream.java:79)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:139)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:110)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:67)
	... 20 more

 INFO  Disconnecting from Bloop session...[0m
2024.12.24 22:04:28 INFO  Cancelling compilation on Bloop server[0m
2024.12.24 22:04:28 ERROR Failed to connect with build server, no functionality will work.
org.h2.jdbc.JdbcSQLNonTransientException: IO Exception: "java.io.EOFException" [90028-230]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convertIOException(DbException.java:452)
	at org.h2.result.ResultRemote.fetchAdditionalRows(ResultRemote.java:232)
	at org.h2.result.ResultRemote.hasNext(ResultRemote.java:161)
	at org.h2.result.FetchedResult.next(FetchedResult.java:34)
	at org.h2.jdbc.JdbcResultSet.nextRow(JdbcResultSet.java:3593)
	at org.h2.jdbc.JdbcResultSet.next(JdbcResultSet.java:125)
	at scala.meta.internal.metals.JdbcEnrichments$XtensionConnection.query(JdbcEnrichments.scala:39)
	at scala.meta.internal.metals.JarTypeHierarchy.getTypeHierarchy(JarTopLevels.scala:189)
	at scala.meta.internal.metals.Indexer.indexJdkSources(Indexer.scala:529)
	at scala.meta.internal.metals.Indexer.$anonfun$indexWorkspace$17(Indexer.scala:298)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.Indexer.$anonfun$indexWorkspace$16(Indexer.scala:295)
	at scala.meta.internal.metals.Indexer.$anonfun$indexWorkspace$16$adapted(Indexer.scala:291)
	at scala.collection.immutable.List.foreach(List.scala:334)
	at scala.meta.internal.metals.Indexer.indexWorkspace(Indexer.scala:291)
	at scala.meta.internal.metals.Indexer.$anonfun$profiledIndexWorkspace$2(Indexer.scala:167)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.Indexer.$anonfun$profiledIndexWorkspace$1(Indexer.scala:167)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.lang.Thread.run(Thread.java:1583)
Caused by: java.io.EOFException
	at java.io.DataInputStream.readFully(DataInputStream.java:210)
	at java.io.DataInputStream.readInt(DataInputStream.java:385)
	at org.h2.value.Transfer.readInt(Transfer.java:304)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:617)
	at org.h2.result.ResultRemote.fetchAdditionalRows(ResultRemote.java:229)
	at org.h2.result.ResultRemote.hasNext(ResultRemote.java:161)
	at org.h2.result.FetchedResult.next(FetchedResult.java:34)
	at org.h2.jdbc.JdbcResultSet.nextRow(JdbcResultSet.java:3593)
	at org.h2.jdbc.JdbcResultSet.next(JdbcResultSet.java:125)
	at scala.meta.internal.metals.JdbcEnrichments$XtensionConnection.query(JdbcEnrichments.scala:39)
	at scala.meta.internal.metals.JarTypeHierarchy.getTypeHierarchy(JarTopLevels.scala:189)
	at scala.meta.internal.metals.Indexer.indexJdkSources(Indexer.scala:529)
	at scala.meta.internal.metals.Indexer.$anonfun$indexWorkspace$17(Indexer.scala:298)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.Indexer.$anonfun$indexWorkspace$16(Indexer.scala:295)
	at scala.meta.internal.metals.Indexer.$anonfun$indexWorkspace$16$adapted(Indexer.scala:291)
	at scala.collection.immutable.List.foreach(List.scala:334)
	at scala.meta.internal.metals.Indexer.indexWorkspace(Indexer.scala:291)
	at scala.meta.internal.metals.Indexer.$anonfun$profiledIndexWorkspace$2(Indexer.scala:167)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.Indexer.$anonfun$profiledIndexWorkspace$1(Indexer.scala:167)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.lang.Thread.run(Thread.java:1583)
[0m
java.util.concurrent.RejectedExecutionException: Task Future(<not completed>) rejected from java.util.concurrent.ThreadPoolExecutor@45ca843[Shutting down, pool size = 14, active threads = 2, queued tasks = 0, completed tasks = 1019]
	at java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2081)
	at java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:841)
	at java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1376)
	at scala.concurrent.impl.ExecutionContextImpl.execute(ExecutionContextImpl.scala:21)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:429)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:435)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:506)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@468deb7b]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@60d1627f]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@468deb7b]
2024.12.24 22:04:33 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 22:04:33 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:33 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:33 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:33 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:33 INFO  Attempting to connect to the build server...[0m
2024.12.24 22:04:33 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 22:04:33 INFO  Attempting to connect to the build server...[0m
2024.12.24 22:04:33 INFO  Attempting to connect to the build server...[0m
2024.12.24 22:04:33 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 22:04:34 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.24 22:04:33 INFO  time: Connected to build server in 0.29s[0m
2024.12.24 22:04:33 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.24 22:04:34 INFO  time: Imported build in 0.11s[0m
2024.12.24 22:04:34 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:34 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:34 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:34 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:34 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:34 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:34 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:34 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:34 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:34 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:34 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:34 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:34 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:34 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:34 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:34 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:34 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:34 INFO  running doctor check[0m
2024.12.24 22:04:34 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.24 22:04:34 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
Dec 24, 2024 10:04:35 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.24 22:04:36 INFO  compiling root (3 scala sources)[0m
2024.12.24 22:04:36 INFO  time: compiled root in 0.52s[0m
2024.12.24 22:04:38 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.24 22:04:39 INFO  time: indexed workspace in 5.08s[0m
2024.12.24 22:05:38 INFO  compiling root (1 scala source)[0m
2024.12.24 22:05:38 INFO  time: compiled root in 0.17s[0m
2024.12.24 22:07:18 INFO  compiling root (1 scala source)[0m
2024.12.24 22:07:18 INFO  time: compiled root in 0.17s[0m
2024.12.24 22:07:57 INFO  compiling root (1 scala source)[0m
2024.12.24 22:07:57 INFO  time: compiled root in 0.18s[0m
2024.12.24 22:08:21 INFO  compiling root (1 scala source)[0m
2024.12.24 22:08:21 INFO  time: compiled root in 0.14s[0m
2024.12.24 22:11:23 INFO  compiling root (1 scala source)[0m
2024.12.24 22:11:23 INFO  time: compiled root in 0.15s[0m
2024.12.24 22:11:26 INFO  compiling root (1 scala source)[0m
2024.12.24 22:11:26 INFO  time: compiled root in 0.17s[0m
2024.12.24 22:13:02 INFO  compiling root (1 scala source)[0m
2024.12.24 22:13:02 INFO  time: compiled root in 0.15s[0m
2024.12.24 22:13:17 INFO  compiling root (1 scala source)[0m
2024.12.24 22:13:17 INFO  time: compiled root in 0.14s[0m
2024.12.24 22:13:54 INFO  compiling root (1 scala source)[0m
2024.12.24 22:13:54 INFO  time: compiled root in 0.12s[0m
2024.12.24 22:14:15 INFO  compiling root (1 scala source)[0m
2024.12.24 22:14:15 INFO  time: compiled root in 0.12s[0m
2024.12.24 22:15:19 INFO  compiling root (1 scala source)[0m
2024.12.24 22:15:19 INFO  time: compiled root in 0.12s[0m
2024.12.24 22:19:05 INFO  compiling root (1 scala source)[0m
2024.12.24 22:19:05 INFO  time: compiled root in 0.17s[0m
2024.12.24 22:20:35 INFO  compiling root (1 scala source)[0m
2024.12.24 22:20:35 INFO  time: compiled root in 0.14s[0m
2024.12.24 22:21:14 INFO  compiling root (1 scala source)[0m
2024.12.24 22:21:14 INFO  time: compiled root in 0.11s[0m
2024.12.24 22:22:45 INFO  compiling root (1 scala source)[0m
2024.12.24 22:22:45 INFO  time: compiled root in 0.12s[0m
2024.12.24 22:24:07 INFO  compiling root (1 scala source)[0m
2024.12.24 22:24:07 INFO  time: compiled root in 0.12s[0m
2024.12.24 22:24:57 INFO  compiling root (1 scala source)[0m
2024.12.24 22:24:57 INFO  time: compiled root in 0.12s[0m
2024.12.24 22:26:41 INFO  Shutting down server[0m
2024.12.24 22:26:41 INFO  shutting down Metals[0m
2024.12.24 22:26:41 INFO  Shut down connection with build server.[0m
2024.12.24 22:26:41 INFO  Shut down connection with build server.[0m
2024.12.24 22:26:41 INFO  Shut down connection with build server.[0m
2024.12.29 14:18:43 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@7e5db1c9]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@4385bbb0]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@7e5db1c9]
2024.12.29 14:18:43 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 14:18:43 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 14:18:44 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 14:18:44 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 14:18:44 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 14:18:44 INFO  Attempting to connect to the build server...[0m
2024.12.29 14:18:44 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 14:18:44 INFO  Attempting to connect to the build server...[0m
2024.12.29 14:18:44 INFO  Attempting to connect to the build server...[0m
2024.12.29 14:18:44 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 14:18:44 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 14:18:44 INFO  time: Connected to build server in 0.35s[0m
2024.12.29 14:18:44 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 14:18:45 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 14:18:45 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 14:18:45 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 14:18:45 INFO  running doctor check[0m
2024.12.29 14:18:45 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
Dec 29, 2024 2:18:47 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.29 14:18:49 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 14:18:49 INFO  time: indexed workspace in 3.96s[0m
2024.12.29 14:19:03 INFO  compiling root (1 scala source)[0m
2024.12.29 14:19:03 INFO  time: compiled root in 0.2s[0m
2024.12.29 14:19:03 INFO  compiling root (1 scala source)[0m
2024.12.29 14:19:03 INFO  time: compiled root in 0.11s[0m
2024.12.29 14:20:03 INFO  Shutting down server[0m
2024.12.29 14:20:03 INFO  shutting down Metals[0m
2024.12.29 14:20:03 INFO  Shut down connection with build server.[0m
2024.12.29 14:20:03 INFO  Shut down connection with build server.[0m
2024.12.29 14:20:03 INFO  Shut down connection with build server.[0m
java.util.concurrent.RejectedExecutionException: Task Future(<not completed>) rejected from java.util.concurrent.ThreadPoolExecutor@45ca843[Shutting down, pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 1295]
	at java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2081)
	at java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:841)
	at java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1376)
	at scala.concurrent.impl.ExecutionContextImpl.execute(ExecutionContextImpl.scala:21)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:429)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:506)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024.12.29 14:20:12 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@1150d1d3]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@295cd294]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@1150d1d3]
2024.12.29 14:20:12 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 14:20:12 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 14:20:12 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 14:20:12 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 14:20:12 INFO  Attempting to connect to the build server...[0m
2024.12.29 14:20:12 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 14:20:12 INFO  Attempting to connect to the build server...[0m
2024.12.29 14:20:12 INFO  Attempting to connect to the build server...[0m
2024.12.29 14:20:13 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 14:20:12 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 14:20:13 INFO  time: Connected to build server in 0.37s[0m
2024.12.29 14:20:13 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 14:20:13 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 14:20:13 INFO  running doctor check[0m
2024.12.29 14:20:13 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.29 14:20:15 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 14:20:15 INFO  time: indexed workspace in 2.92s[0m
Dec 29, 2024 2:20:16 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.29 14:20:35 INFO  Shutting down server[0m
2024.12.29 14:20:35 INFO  shutting down Metals[0m
2024.12.29 14:20:35 INFO  Shut down connection with build server.[0m
2024.12.29 14:20:35 INFO  Shut down connection with build server.[0m
2024.12.29 14:20:35 INFO  Shut down connection with build server.[0m
2024.12.29 14:23:56 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@5df6b5d3]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@42db4b77]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@5df6b5d3]
2024.12.29 14:23:56 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 14:23:57 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 14:23:57 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 14:23:57 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 14:23:57 INFO  Attempting to connect to the build server...[0m
2024.12.29 14:23:57 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 14:23:57 INFO  Attempting to connect to the build server...[0m
2024.12.29 14:23:57 INFO  Attempting to connect to the build server...[0m
2024.12.29 14:23:57 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 14:23:57 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 14:23:57 INFO  time: Connected to build server in 0.25s[0m
2024.12.29 14:23:57 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 14:23:57 INFO  running doctor check[0m
2024.12.29 14:23:57 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.29 14:24:01 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 14:24:01 INFO  time: indexed workspace in 3.84s[0m
Dec 29, 2024 2:24:02 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.29 14:29:08 INFO  compiling root (1 scala source)[0m
2024.12.29 14:29:08 INFO  time: compiled root in 94ms[0m
2024.12.29 14:34:55 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala:50: error: [dialect scala3] identifier expected but val found
    val attemptedConversionToRegex = Try {
    ^[0m
2024.12.29 14:34:55 INFO  compiling root (1 scala source)[0m
2024.12.29 14:34:55 INFO  time: compiled root in 87ms[0m
2024.12.29 14:36:27 INFO  compiling root (1 scala source)[0m
2024.12.29 14:36:27 INFO  time: compiled root in 0.15s[0m
2024.12.29 14:42:49 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala:55: error: [dialect scala3] ; expected but => found
     cae Failure() => return None()
                   ^[0m
2024.12.29 14:42:49 INFO  compiling root (1 scala source)[0m
2024.12.29 14:42:49 INFO  time: compiled root in 89ms[0m
2024.12.29 14:43:05 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala:55: error: [dialect scala3] ; expected but => found
     cae Failure() => return None()
                   ^[0m
2024.12.29 14:43:05 INFO  compiling root (1 scala source)[0m
2024.12.29 14:43:05 INFO  time: compiled root in 0.2s[0m
2024.12.29 14:45:03 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala:55: error: [dialect scala3] ; expected but => found
     cae Failure() => return None()
                   ^[0m
2024.12.29 14:45:04 INFO  compiling root (1 scala source)[0m
2024.12.29 14:45:04 INFO  time: compiled root in 0.21s[0m
2024.12.29 14:45:09 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala:55: error: [dialect scala3] ; expected but => found
     casee Failure() => return None()
                     ^[0m
2024.12.29 14:45:09 INFO  compiling root (1 scala source)[0m
2024.12.29 14:45:09 INFO  time: compiled root in 0.22s[0m
2024.12.29 14:45:11 INFO  compiling root (1 scala source)[0m
2024.12.29 14:45:11 INFO  time: compiled root in 0.35s[0m
2024.12.29 14:45:24 INFO  compiling root (1 scala source)[0m
2024.12.29 14:45:24 INFO  time: compiled root in 0.2s[0m
2024.12.29 14:49:54 INFO  compiling root (1 scala source)[0m
2024.12.29 14:49:54 INFO  time: compiled root in 0.18s[0m
2024.12.29 14:56:20 INFO  compiling root (1 scala source)[0m
2024.12.29 14:56:20 INFO  time: compiled root in 0.2s[0m
2024.12.29 14:56:28 INFO  compiling root (1 scala source)[0m
2024.12.29 14:56:28 INFO  time: compiled root in 0.17s[0m
2024.12.29 14:56:50 INFO  compiling root (1 scala source)[0m
2024.12.29 14:56:50 INFO  time: compiled root in 0.31s[0m
2024.12.29 14:57:24 INFO  compiling root (1 scala source)[0m
2024.12.29 14:57:24 INFO  time: compiled root in 0.24s[0m
2024.12.29 14:57:26 INFO  compiling root (1 scala source)[0m
2024.12.29 14:57:26 INFO  time: compiled root in 0.25s[0m
2024.12.29 14:57:46 INFO  compiling root (1 scala source)[0m
2024.12.29 14:57:46 INFO  time: compiled root in 0.23s[0m
2024.12.29 14:57:54 INFO  compiling root (1 scala source)[0m
2024.12.29 14:57:54 INFO  time: compiled root in 0.33s[0m
2024.12.29 14:57:59 INFO  compiling root (1 scala source)[0m
2024.12.29 14:57:59 INFO  time: compiled root in 0.19s[0m
2024.12.29 15:01:23 INFO  compiling root (1 scala source)[0m
2024.12.29 15:01:23 INFO  time: compiled root in 0.12s[0m
2024.12.29 15:01:29 INFO  Shutting down server[0m
2024.12.29 15:01:29 INFO  shutting down Metals[0m
2024.12.29 15:01:29 INFO  Shut down connection with build server.[0m
2024.12.29 15:01:29 INFO  Shut down connection with build server.[0m
2024.12.29 15:01:29 INFO  Shut down connection with build server.[0m
2024.12.29 15:01:50 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@5bd7d903]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@675b83af]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@5bd7d903]
2024.12.29 15:01:50 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:01:50 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:01:50 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:01:50 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:01:50 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:01:50 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:01:50 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:01:50 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:01:50 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:01:50 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:01:51 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:01:51 INFO  time: Connected to build server in 0.34s[0m
2024.12.29 15:01:51 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 15:01:51 INFO  time: Imported build in 0.11s[0m
2024.12.29 15:01:51 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:01:51 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:01:51 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:01:51 INFO  running doctor check[0m
2024.12.29 15:01:51 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.29 15:01:55 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:01:55 INFO  time: indexed workspace in 3.94s[0m
Dec 29, 2024 3:01:55 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.29 15:02:05 INFO  compiling root (1 scala source)[0m
2024.12.29 15:02:05 INFO  time: compiled root in 0.2s[0m
2024.12.29 15:02:45 INFO  compiling root (1 scala source)[0m
2024.12.29 15:02:45 INFO  time: compiled root in 0.15s[0m
2024.12.29 15:02:48 INFO  Shutting down server[0m
2024.12.29 15:02:48 INFO  shutting down Metals[0m
2024.12.29 15:02:48 INFO  Shut down connection with build server.[0m
2024.12.29 15:02:48 INFO  Shut down connection with build server.[0m
2024.12.29 15:02:48 INFO  Shut down connection with build server.[0m
2024.12.29 15:03:45 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@745112ca]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@53df71f9]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@745112ca]
2024.12.29 15:03:45 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:03:45 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:03:46 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:03:46 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:03:46 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:03:46 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:03:46 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:03:46 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:03:46 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:03:46 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:03:46 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:03:46 INFO  time: Connected to build server in 0.29s[0m
2024.12.29 15:03:46 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 15:03:47 INFO  running doctor check[0m
2024.12.29 15:03:47 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
Dec 29, 2024 3:03:47 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.29 15:03:50 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:03:50 INFO  compiling root (1 scala source)[0m
2024.12.29 15:03:50 INFO  time: compiled root in 0.3s[0m
2024.12.29 15:03:50 INFO  time: indexed workspace in 4.04s[0m
2024.12.29 15:04:15 INFO  compiling root (1 scala source)[0m
2024.12.29 15:04:15 INFO  time: compiled root in 0.21s[0m
2024.12.29 15:04:20 INFO  compiling root (1 scala source)[0m
2024.12.29 15:04:20 INFO  time: compiled root in 0.15s[0m
2024.12.29 15:06:46 INFO  Shutting down server[0m
2024.12.29 15:06:46 INFO  shutting down Metals[0m
2024.12.29 15:06:46 INFO  Shut down connection with build server.[0m
2024.12.29 15:06:46 INFO  Shut down connection with build server.[0m
2024.12.29 15:06:46 INFO  Shut down connection with build server.[0m
2024.12.29 15:07:04 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@30c09403]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@58738dba]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@30c09403]
2024.12.29 15:07:04 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:07:04 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:07:04 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:07:04 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:07:04 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:07:04 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:07:04 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:07:04 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:07:05 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:07:05 INFO  time: Connected to build server in 0.31s[0m
2024.12.29 15:07:05 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 15:07:05 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:07:05 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:07:04 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:07:05 INFO  running doctor check[0m
2024.12.29 15:07:05 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.29 15:07:08 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:07:08 INFO  time: indexed workspace in 4.07s[0m
Dec 29, 2024 3:07:09 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3
2024.12.29 15:07:19 INFO  compiling root (1 scala source)[0m
2024.12.29 15:07:19 INFO  time: compiled root in 0.32s[0m
2024.12.29 15:07:19 INFO  Shutting down server[0m
2024.12.29 15:07:19 INFO  shutting down Metals[0m
2024.12.29 15:07:19 INFO  Shut down connection with build server.[0m
2024.12.29 15:07:19 INFO  Shut down connection with build server.[0m
2024.12.29 15:07:19 INFO  Shut down connection with build server.[0m
2024.12.29 15:08:35 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@23c37751]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@48e6129e]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@23c37751]
2024.12.29 15:08:35 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:08:36 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:08:36 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:08:36 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:08:36 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:08:36 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:08:36 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:08:36 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:08:36 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:08:36 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:08:36 INFO  time: Connected to build server in 0.27s[0m
2024.12.29 15:08:36 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 15:08:37 INFO  running doctor check[0m
2024.12.29 15:08:37 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
Dec 29, 2024 3:08:38 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.29 15:08:39 INFO  Shutting down server[0m
2024.12.29 15:08:39 INFO  shutting down Metals[0m
2024.12.29 15:08:39 INFO  Shut down connection with build server.[0m
2024.12.29 15:08:39 INFO  Shut down connection with build server.[0m
2024.12.29 15:08:39 INFO  Shut down connection with build server.[0m
2024.12.29 15:10:10 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@104bd3bd]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@2f02bc58]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@104bd3bd]
2024.12.29 15:10:10 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:10:10 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:10:11 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:10:11 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:10:11 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:10:11 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:10:11 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:10:11 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:10:11 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:10:11 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:10:11 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:10:11 INFO  time: Connected to build server in 0.27s[0m
2024.12.29 15:10:11 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 15:10:12 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:10:12 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:10:11 INFO  running doctor check[0m
2024.12.29 15:10:11 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.29 15:10:14 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:10:14 INFO  time: indexed workspace in 3.55s[0m
Dec 29, 2024 3:10:15 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.29 15:10:27 INFO  compiling root (1 scala source)[0m
2024.12.29 15:10:27 INFO  time: compiled root in 0.15s[0m
2024.12.29 15:10:31 INFO  Shutting down server[0m
2024.12.29 15:10:31 INFO  shutting down Metals[0m
2024.12.29 15:10:31 INFO  Shut down connection with build server.[0m
2024.12.29 15:10:31 INFO  Shut down connection with build server.[0m
2024.12.29 15:10:31 INFO  Shut down connection with build server.[0m
2024.12.29 15:10:49 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@d88e5be]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@756f0207]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@d88e5be]
2024.12.29 15:10:49 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:10:50 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:10:50 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:10:50 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:10:50 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:10:50 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:10:50 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:10:50 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:10:50 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:10:50 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:10:50 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:10:50 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:10:50 INFO  time: Connected to build server in 0.36s[0m
2024.12.29 15:10:50 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 15:10:50 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:10:51 INFO  running doctor check[0m
2024.12.29 15:10:51 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.29 15:10:54 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:10:54 INFO  time: indexed workspace in 4.3s[0m
Dec 29, 2024 3:10:55 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3
Dec 29, 2024 3:10:55 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6
2024.12.29 15:13:02 INFO  compiling root (1 scala source)[0m
2024.12.29 15:13:02 INFO  time: compiled root in 0.28s[0m
2024.12.29 15:13:15 INFO  compiling root (1 scala source)[0m
2024.12.29 15:13:15 INFO  time: compiled root in 0.17s[0m
2024.12.29 15:13:56 INFO  compiling root (1 scala source)[0m
2024.12.29 15:13:56 INFO  time: compiled root in 87ms[0m
2024.12.29 15:17:01 INFO  compiling root (1 scala source)[0m
2024.12.29 15:17:01 INFO  time: compiled root in 0.19s[0m
2024.12.29 15:17:14 INFO  compiling root (1 scala source)[0m
2024.12.29 15:17:14 INFO  time: compiled root in 0.17s[0m
2024.12.29 15:17:30 INFO  compiling root (1 scala source)[0m
2024.12.29 15:17:30 INFO  time: compiled root in 84ms[0m
2024.12.29 15:20:24 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala:54: error: [dialect scala3] is not a valid refinement declaration
      val result = Try(phonemeCategoryMap(input))
      ^[0m
2024.12.29 15:20:24 INFO  compiling root (1 scala source)[0m
2024.12.29 15:20:24 INFO  time: compiled root in 0.18s[0m
2024.12.29 15:20:25 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala:54: error: [dialect scala3] is not a valid refinement declaration
      val result = Try(phonemeCategoryMap(input))
      ^[0m
2024.12.29 15:20:25 INFO  compiling root (1 scala source)[0m
2024.12.29 15:20:25 INFO  time: compiled root in 0.16s[0m
2024.12.29 15:21:20 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala:54: error: [dialect scala3] is not a valid refinement declaration
      val result = Try(phonemeCategoryMap(input))
      ^[0m
2024.12.29 15:21:20 INFO  compiling root (1 scala source)[0m
2024.12.29 15:21:20 INFO  time: compiled root in 0.19s[0m
2024.12.29 15:21:40 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala:54: error: [dialect scala3] is not a valid refinement declaration
      val result = Try(phonemeCategoryMap(input))
      ^[0m
2024.12.29 15:21:40 INFO  compiling root (1 scala source)[0m
2024.12.29 15:21:40 INFO  time: compiled root in 0.16s[0m
2024.12.29 15:22:28 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala:54: error: [dialect scala3] is not a valid refinement declaration
      val result = Try(phonemeCategoryMap(input))
      ^[0m
2024.12.29 15:22:28 INFO  compiling root (1 scala source)[0m
2024.12.29 15:22:28 INFO  time: compiled root in 0.34s[0m
2024.12.29 15:22:58 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala:54: error: [dialect scala3] is not a valid refinement declaration
      val result = Try(phonemeCategoryMap(input))
      ^[0m
2024.12.29 15:22:58 INFO  compiling root (1 scala source)[0m
2024.12.29 15:22:58 INFO  time: compiled root in 93ms[0m
2024.12.29 15:23:01 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala:54: error: [dialect scala3] is not a valid refinement declaration
      val result = Try(phonemeCategoryMap(input))
      ^[0m
2024.12.29 15:23:01 INFO  compiling root (1 scala source)[0m
2024.12.29 15:23:01 INFO  time: compiled root in 81ms[0m
2024.12.29 15:23:09 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala:54: error: [dialect scala3] is not a valid refinement declaration
      val result = Try(phonemeCategoryMap(input))
      ^[0m
2024.12.29 15:23:09 INFO  compiling root (1 scala source)[0m
2024.12.29 15:23:09 INFO  time: compiled root in 0.1s[0m
2024.12.29 15:23:22 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala:54: error: [dialect scala3] is not a valid refinement declaration
      val result = Try(phonemeCategoryMap(input))
      ^[0m
2024.12.29 15:23:22 INFO  compiling root (1 scala source)[0m
2024.12.29 15:23:22 INFO  time: compiled root in 92ms[0m
2024.12.29 15:23:52 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala:54: error: [dialect scala3] is not a valid refinement declaration
      val result = Try(phonemeCategoryMap(input))
      ^[0m
2024.12.29 15:23:52 INFO  compiling root (1 scala source)[0m
2024.12.29 15:23:52 INFO  time: compiled root in 85ms[0m
2024.12.29 15:23:55 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala:54: error: [dialect scala3] is not a valid refinement declaration
      val result = Try(phonemeCategoryMap(input))
      ^[0m
2024.12.29 15:23:55 INFO  compiling root (1 scala source)[0m
2024.12.29 15:23:55 INFO  time: compiled root in 81ms[0m
2024.12.29 15:24:39 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala:54: error: [dialect scala3] is not a valid refinement declaration
      val result = Try(phonemeCategoryMap(input))
      ^[0m
2024.12.29 15:24:39 INFO  compiling root (1 scala source)[0m
2024.12.29 15:24:39 INFO  time: compiled root in 85ms[0m
2024.12.29 15:25:07 INFO  compiling root (1 scala source)[0m
2024.12.29 15:25:07 INFO  time: compiled root in 0.16s[0m
2024.12.29 15:25:15 INFO  Shutting down server[0m
2024.12.29 15:25:15 INFO  shutting down Metals[0m
2024.12.29 15:25:15 INFO  Shut down connection with build server.[0m
2024.12.29 15:25:15 INFO  Shut down connection with build server.[0m
2024.12.29 15:25:15 INFO  Shut down connection with build server.[0m
Dec 29, 2024 3:25:15 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint notify
INFO: Failed to send notification message.
org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.nio.channels.AsynchronousCloseException
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:41)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.notify(RemoteEndpoint.java:135)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.sendCancelNotification(RemoteEndpoint.java:191)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:160)
	at scala.meta.internal.metals.utils.FutureWithTimeout$$anon$1.$anonfun$cancel$1(FutureWithTimeout.scala:37)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:217)
	at scala.meta.internal.metals.utils.FutureWithTimeout$$anon$1.cancel(FutureWithTimeout.scala:37)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:334)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.utils.RequestRegistry.cancel(RequestRegistry.scala:94)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:450)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:182)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:174)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.nio.channels.AsynchronousCloseException
	at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:203)
	at java.base/sun.nio.ch.SinkChannelImpl.endWrite(SinkChannelImpl.java:268)
	at java.base/sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:290)
	at java.base/sun.nio.ch.ChannelOutputStream.writeFully(ChannelOutputStream.java:68)
	at java.base/sun.nio.ch.ChannelOutputStream.write(ChannelOutputStream.java:102)
	at java.base/java.io.OutputStream.write(OutputStream.java:124)
	at java.base/sun.nio.ch.ChannelOutputStream.write(ChannelOutputStream.java:79)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:139)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:110)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:67)
	... 20 more

java.util.concurrent.RejectedExecutionException: Task Future(<not completed>) rejected from java.util.concurrent.ThreadPoolExecutor@45ca843[Shutting down, pool size = 7, active threads = 2, queued tasks = 0, completed tasks = 26086]
	at java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2081)
	at java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:841)
	at java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1376)
	at scala.concurrent.impl.ExecutionContextImpl.execute(ExecutionContextImpl.scala:21)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:429)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:506)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024.12.29 15:25:21 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@354bfba2]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@58d31597]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@354bfba2]
2024.12.29 15:25:21 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:25:21 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:25:22 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:25:22 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:25:22 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:25:22 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:25:22 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:25:22 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:25:22 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:25:22 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:25:22 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:25:22 INFO  time: Connected to build server in 0.33s[0m
2024.12.29 15:25:22 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 15:25:23 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:25:23 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:25:23 INFO  running doctor check[0m
2024.12.29 15:25:23 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.29 15:25:26 INFO  compiling root (1 scala source)[0m
2024.12.29 15:25:26 INFO  time: compiled root in 0.2s[0m
2024.12.29 15:25:27 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:25:27 INFO  time: indexed workspace in 4.51s[0m
2024.12.29 15:25:29 INFO  Shutting down server[0m
2024.12.29 15:25:29 INFO  shutting down Metals[0m
2024.12.29 15:25:29 INFO  Shut down connection with build server.[0m
2024.12.29 15:25:29 INFO  Shut down connection with build server.[0m
2024.12.29 15:25:29 INFO  Shut down connection with build server.[0m
2024.12.29 15:25:50 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@28295a4d]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@52c1d358]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@28295a4d]
2024.12.29 15:25:50 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:25:50 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:25:50 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:25:50 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:25:51 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:25:50 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:25:51 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:25:51 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:25:51 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:25:51 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:25:51 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:25:51 INFO  time: Connected to build server in 0.3s[0m
2024.12.29 15:25:51 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 15:25:51 INFO  running doctor check[0m
2024.12.29 15:25:51 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
Dec 29, 2024 3:25:52 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.29 15:25:53 INFO  compiling root (1 scala source)[0m
2024.12.29 15:25:53 INFO  time: compiled root in 0.44s[0m
2024.12.29 15:25:55 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:25:55 INFO  Shutting down server[0m
2024.12.29 15:25:55 INFO  shutting down Metals[0m
2024.12.29 15:25:55 INFO  Shut down connection with build server.[0m
2024.12.29 15:25:55 INFO  Shut down connection with build server.[0m
2024.12.29 15:25:55 INFO  Shut down connection with build server.[0m
2024.12.29 15:25:55 INFO  unable to setup persistent H2 database with AUTO_SERVER=true, falling back to AUTO_SERVER=false.[0m
2024.12.29 15:44:00 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@25924af8]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@e7f5101]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@25924af8]
2024.12.29 15:44:02 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:44:02 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:44:02 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:44:02 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:44:02 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:44:03 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:44:03 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:44:03 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:44:03 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:44:03 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:44:03 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:44:03 INFO  time: Connected to build server in 0.26s[0m
2024.12.29 15:44:03 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 15:44:02 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:44:02 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:44:03 INFO  running doctor check[0m
2024.12.29 15:44:03 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
Dec 29, 2024 3:44:03 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.29 15:44:04 INFO  compiling root (1 scala source)[0m
2024.12.29 15:44:04 INFO  time: compiled root in 0.13s[0m
2024.12.29 15:44:05 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:44:05 INFO  time: indexed workspace in 2.71s[0m
2024.12.29 15:44:06 INFO  Shutting down server[0m
2024.12.29 15:44:06 INFO  shutting down Metals[0m
2024.12.29 15:44:06 INFO  Shut down connection with build server.[0m
2024.12.29 15:44:06 INFO  Shut down connection with build server.[0m
2024.12.29 15:44:06 INFO  Shut down connection with build server.[0m
2024.12.29 15:44:23 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@1a874115]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@28129e24]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@1a874115]
2024.12.29 15:44:23 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:44:23 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:44:23 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:44:23 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:44:23 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:44:23 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:44:23 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:44:23 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:44:23 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:44:23 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:44:23 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:44:23 INFO  time: Connected to build server in 0.23s[0m
2024.12.29 15:44:23 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 15:44:24 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:44:24 INFO  running doctor check[0m
2024.12.29 15:44:24 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
Dec 29, 2024 3:44:24 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.29 15:44:25 INFO  compiling root (1 scala source)[0m
2024.12.29 15:44:25 INFO  time: compiled root in 0.12s[0m
2024.12.29 15:44:26 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:44:26 INFO  Shutting down server[0m
2024.12.29 15:44:26 INFO  shutting down Metals[0m
2024.12.29 15:44:26 INFO  Shut down connection with build server.[0m
2024.12.29 15:44:26 INFO  Shut down connection with build server.[0m
2024.12.29 15:44:26 INFO  Shut down connection with build server.[0m
java.util.concurrent.RejectedExecutionException: Task Future(<not completed>) rejected from java.util.concurrent.ThreadPoolExecutor@45ca843[Shutting down, pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 436]
	at java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2081)
	at java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:841)
	at java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1376)
	at scala.concurrent.impl.ExecutionContextImpl.execute(ExecutionContextImpl.scala:21)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:429)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:435)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:435)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:435)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:435)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:435)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:435)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:435)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:435)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:435)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:335)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:506)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
java.util.concurrent.RejectedExecutionException: Task Future(<not completed>) rejected from java.util.concurrent.ThreadPoolExecutor@45ca843[Shutting down, pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 436]
	at java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2081)
	at java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:841)
	at java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1376)
	at scala.concurrent.impl.ExecutionContextImpl.execute(ExecutionContextImpl.scala:21)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:429)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:335)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:506)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
java.util.concurrent.RejectedExecutionException: Task Future(<not completed>) rejected from java.util.concurrent.ThreadPoolExecutor@45ca843[Shutting down, pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 436]
2024.12.29 15:44:43 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@42b9107]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@6fd5e0db]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@42b9107]
2024.12.29 15:44:43 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:44:43 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:44:43 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:44:43 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:44:43 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:44:43 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:44:43 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:44:43 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:44:43 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:44:43 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:44:43 INFO  time: Connected to build server in 0.24s[0m
2024.12.29 15:44:43 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 15:44:44 INFO  running doctor check[0m
2024.12.29 15:44:44 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
Dec 29, 2024 3:44:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.29 15:44:46 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:44:46 INFO  time: indexed workspace in 2.19s[0m
2024.12.29 15:45:01 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/project/project/metals.sbt. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:45:01 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/project/project/metals.sbt. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:45:01 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/project/project/metals.sbt. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:45:01 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/project/project/metals.sbt. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:45:01 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/project/project/metals.sbt[0m
2024.12.29 15:45:01 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/project/project/metals.sbt. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:45:01 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/project/project/metals.sbt. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:45:01 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/project/project/metals.sbt. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:45:24 INFO  compiling root (1 scala source)[0m
2024.12.29 15:45:24 INFO  time: compiled root in 0.12s[0m
2024.12.29 15:47:49 INFO  compiling root (1 scala source)[0m
2024.12.29 15:47:49 INFO  time: compiled root in 0.12s[0m
2024.12.29 15:47:49 INFO  Shutting down server[0m
2024.12.29 15:47:49 INFO  shutting down Metals[0m
2024.12.29 15:47:49 INFO  Shut down connection with build server.[0m
2024.12.29 15:47:49 INFO  Shut down connection with build server.[0m
2024.12.29 15:47:49 INFO  Shut down connection with build server.[0m
2024.12.29 15:48:17 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@75e30539]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@7995dd5d]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@75e30539]
2024.12.29 15:48:17 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:48:17 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:48:17 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:48:17 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:48:17 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:48:17 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:48:17 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:48:17 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:48:17 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:48:17 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:48:18 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:48:18 INFO  time: Connected to build server in 0.3s[0m
2024.12.29 15:48:18 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 15:48:18 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:48:17 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:48:18 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:48:18 INFO  running doctor check[0m
2024.12.29 15:48:18 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.29 15:48:20 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:48:20 INFO  time: indexed workspace in 2.32s[0m
2024.12.29 15:48:20 INFO  compiling root (1 scala source)[0m
2024.12.29 15:48:20 INFO  time: compiled root in 28ms[0m
2024.12.29 15:48:31 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
2024.12.29 15:48:48 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@224410e2]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@143c813c]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@224410e2]
2024.12.29 15:48:48 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:48:48 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:48:48 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:48:48 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/main/Main.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 15:48:48 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:48:48 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:48:48 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:48:48 INFO  Attempting to connect to the build server...[0m
2024.12.29 15:48:48 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:48:48 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 15:48:48 INFO  time: Connected to build server in 0.26s[0m
2024.12.29 15:48:48 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 15:48:48 INFO  running doctor check[0m
2024.12.29 15:48:48 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.29 15:48:50 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 15:48:50 INFO  time: indexed workspace in 2.09s[0m
Dec 29, 2024 3:48:50 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.29 15:49:04 INFO  Shutting down server[0m
2024.12.29 15:49:04 INFO  shutting down Metals[0m
2024.12.29 15:49:04 INFO  Shut down connection with build server.[0m
2024.12.29 15:49:04 INFO  Shut down connection with build server.[0m
2024.12.29 15:49:04 INFO  Shut down connection with build server.[0m
2024.12.29 15:57:13 INFO  compiling root (1 scala source)[0m
2024.12.29 15:57:13 INFO  time: compiled root in 0.15s[0m
2024.12.29 15:57:33 INFO  compiling root (1 scala source)[0m
2024.12.29 15:57:33 INFO  time: compiled root in 0.12s[0m
2024.12.29 16:00:15 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@1c5ffc7b]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@1048cf7f]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@1c5ffc7b]
2024.12.29 16:00:15 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 16:00:15 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:00:15 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:00:15 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:00:15 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:00:15 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:00:15 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:00:15 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:00:15 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:00:15 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:00:15 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:00:15 INFO  time: Connected to build server in 0.25s[0m
2024.12.29 16:00:15 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 16:00:15 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:00:15 INFO  running doctor check[0m
2024.12.29 16:00:15 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.29 16:00:17 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 16:00:17 INFO  time: indexed workspace in 2.46s[0m
2024.12.29 16:00:18 INFO  compiling root (1 scala source)[0m
2024.12.29 16:00:18 INFO  time: compiled root in 0.13s[0m
Dec 29, 2024 4:00:18 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.29 16:00:18 INFO  compiling root (1 scala source)[0m
2024.12.29 16:00:18 INFO  time: compiled root in 0.11s[0m
2024.12.29 16:01:16 INFO  compiling root (1 scala source)[0m
2024.12.29 16:01:16 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 12m 58.566s)[0m
2024.12.29 16:01:16 INFO  compiling root (1 scala source)[0m
2024.12.29 16:01:16 INFO  time: compiled root in 0.12s[0m
2024.12.29 16:01:16 INFO  time: compiled root in 0.1s[0m
2024.12.29 16:01:16 INFO  compiling root (1 scala source)[0m
2024.12.29 16:01:16 INFO  time: compiled root in 0.25s[0m
2024.12.29 16:02:51 INFO  compiling root (1 scala source)[0m
2024.12.29 16:02:51 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 2m 35.917s)[0m
2024.12.29 16:02:51 INFO  compiling root (1 scala source)[0m
2024.12.29 16:02:51 INFO  time: compiled root in 0.11s[0m
2024.12.29 16:02:51 INFO  time: compiled root in 0.11s[0m
2024.12.29 16:02:51 INFO  compiling root (1 scala source)[0m
2024.12.29 16:02:51 INFO  time: compiled root in 0.16s[0m
2024.12.29 16:03:04 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:34: error: [dialect scala3] then expected but } found
  }
  ^[0m
2024.12.29 16:03:04 INFO  compiling root (1 scala source)[0m
2024.12.29 16:03:04 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 2m 48.992s)[0m
2024.12.29 16:03:04 INFO  compiling root (1 scala source)[0m
2024.12.29 16:03:04 INFO  time: compiled root in 0.22s[0m
2024.12.29 16:03:04 INFO  time: compiled root in 0.23s[0m
2024.12.29 16:03:04 INFO  compiling root (1 scala source)[0m
2024.12.29 16:03:04 INFO  time: compiled root in 0.13s[0m
2024.12.29 16:03:10 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 14m 52.503s)[0m
2024.12.29 16:03:10 INFO  compiling root (1 scala source)[0m
2024.12.29 16:03:10 INFO  compiling root (1 scala source)[0m
2024.12.29 16:03:10 INFO  time: compiled root in 0.13s[0m
2024.12.29 16:03:10 INFO  time: compiled root in 0.13s[0m
2024.12.29 16:03:10 INFO  compiling root (1 scala source)[0m
2024.12.29 16:03:10 INFO  time: compiled root in 0.11s[0m
2024.12.29 16:03:19 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:34: error: [dialect scala3] then expected but } found
  }
  ^[0m
2024.12.29 16:03:19 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 3m 4.13s)[0m
2024.12.29 16:03:19 INFO  compiling root (1 scala source)[0m
2024.12.29 16:03:19 INFO  compiling root (1 scala source)[0m
2024.12.29 16:03:19 INFO  time: compiled root in 0.13s[0m
2024.12.29 16:03:19 INFO  time: compiled root in 0.13s[0m
2024.12.29 16:03:19 INFO  compiling root (1 scala source)[0m
2024.12.29 16:03:19 INFO  time: compiled root in 0.13s[0m
2024.12.29 16:03:27 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:34: error: [dialect scala3] then expected but } found
  }
  ^[0m
2024.12.29 16:03:27 INFO  compiling root (1 scala source)[0m
2024.12.29 16:03:27 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 3m 11.943s)[0m
2024.12.29 16:03:27 INFO  compiling root (1 scala source)[0m
2024.12.29 16:03:27 INFO  time: compiled root in 0.16s[0m
2024.12.29 16:03:27 INFO  time: compiled root in 0.17s[0m
2024.12.29 16:03:27 INFO  compiling root (1 scala source)[0m
2024.12.29 16:03:27 INFO  time: compiled root in 0.15s[0m
2024.12.29 16:03:57 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:34: error: [dialect scala3] then expected but } found
  }
  ^[0m
2024.12.29 16:03:57 INFO  compiling root (1 scala source)[0m
2024.12.29 16:03:57 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 15m 39.547s)[0m
2024.12.29 16:03:57 INFO  compiling root (1 scala source)[0m
2024.12.29 16:03:57 INFO  time: compiled root in 0.14s[0m
2024.12.29 16:03:57 INFO  time: compiled root in 0.13s[0m
2024.12.29 16:03:57 INFO  compiling root (1 scala source)[0m
2024.12.29 16:03:57 INFO  time: compiled root in 0.16s[0m
2024.12.29 16:04:00 INFO  compiling root (1 scala source)[0m
2024.12.29 16:04:00 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 15m 42.495s)[0m
2024.12.29 16:04:00 INFO  compiling root (1 scala source)[0m
2024.12.29 16:04:00 INFO  time: compiled root in 0.14s[0m
2024.12.29 16:04:00 INFO  time: compiled root in 0.14s[0m
2024.12.29 16:04:00 INFO  compiling root (1 scala source)[0m
2024.12.29 16:04:00 INFO  time: compiled root in 0.13s[0m
2024.12.29 16:04:01 INFO  Shutting down server[0m
2024.12.29 16:04:01 INFO  shutting down Metals[0m
2024.12.29 16:04:01 INFO  Shut down connection with build server.[0m
2024.12.29 16:04:01 INFO  Shut down connection with build server.[0m
2024.12.29 16:04:01 INFO  Shut down connection with build server.[0m
2024.12.29 16:04:26 INFO  compiling root (1 scala source)[0m
2024.12.29 16:04:26 INFO  time: compiled root in 0.16s[0m
2024.12.29 16:04:41 INFO  compiling root (1 scala source)[0m
2024.12.29 16:04:41 INFO  time: compiled root in 0.16s[0m
2024.12.29 16:05:01 INFO  compiling root (1 scala source)[0m
2024.12.29 16:05:01 INFO  time: compiled root in 0.17s[0m
2024.12.29 16:05:13 INFO  compiling root (1 scala source)[0m
2024.12.29 16:05:13 INFO  time: compiled root in 0.16s[0m
2024.12.29 16:09:14 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@6bc0d04c]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@5f92304b]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@6bc0d04c]
2024.12.29 16:09:14 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 16:09:14 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:09:14 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:09:14 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/soundchange/SoundChange.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:09:14 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:09:14 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:09:14 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:09:14 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:09:14 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:09:15 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:09:15 INFO  time: Connected to build server in 0.28s[0m
2024.12.29 16:09:15 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 16:09:14 INFO  time: Imported build in 0.11s[0m
2024.12.29 16:09:15 INFO  running doctor check[0m
2024.12.29 16:09:15 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.29 16:09:17 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 16:09:17 INFO  time: indexed workspace in 2.3s[0m
2024.12.29 16:09:17 INFO  compiling root (1 scala source)[0m
2024.12.29 16:09:17 INFO  time: compiled root in 0.17s[0m
Dec 29, 2024 4:09:17 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.29 16:09:17 INFO  compiling root (1 scala source)[0m
2024.12.29 16:09:17 INFO  time: compiled root in 0.15s[0m
Dec 29, 2024 4:09:39 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 1933,
      "uri": "file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala"
    },
    "contentChanges": [
      {
        "text": "package com.osprey.app\npackage filereader\n\nimport scala.io.Source\nimport scala.util.{Try, Success, Failure}\nimport soundchange.SoundChange\n\nobject FileReader {\n  def createPhonemeGroupMap(): Map[Char, String] \u003d {\n    val filename \u003d \"phonemegroups.txt\"\n    getLinesFromFile(filename)\n  }\n  def createSoundChangeList(): List[SoundChange] \u003d {\n    val filename \u003d \"soundchanges.txt\"\n    val stringList \u003d getLinesFromFile(filename)\n    stringList.map(convertToSoundChange)\n  }\n  def createWorldList(): List[String] \u003d {\n    val filename \u003d \"wordlist.txt\"\n    getLinesFromFile(filename)\n  }\n  def getLinesFromFile(filename: String): List[String] \u003d {\n    val file \u003d Source.fromFile(filename)\n    val lines \u003d file.getLines\n    file.close\n    lines.toList\n  }\n  def convertToSoundChange(input: String): Option[SoundChange] \u003d {\n    def basicSoundChange(input : String): SoundChange \u003d {\n      val basicPattern \u003d raw\"($ANY_CHARS)\u003e($ANY_CHARS)\".r\n    }\n    val ANY_CHARS \u003d raw\"[\\u0000-\\uFFFF]*\"\n    val CONVERSION_SYMBOL \u003d raw\"\u003e\"\n    val CONDITION_SYMBOL \u003d raw\"/\"\n    val TARGET_SYMBOL \u003d raw\"_\"\n    if !input.contains(CONVERSION_SYMBOL) then return None\n    if !input.contains(CONDITION_SYMBOL) then\n      return Some(basicSoundChange(input))\n  }\n}\n"
      }
    ]
  }
}
java.lang.IllegalStateException: An unexpected exception occurred while executing jsonrpc method public abstract java.util.concurrent.CompletableFuture scala.meta.metals.lsp.TextDocumentService.didChange(org.eclipse.lsp4j.DidChangeTextDocumentParams)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:73)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:160)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:231)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:198)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:185)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:97)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:114)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.nio.file.NoSuchFileException: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala
	at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:106)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
	at java.base/sun.nio.fs.UnixPath.toRealPath(UnixPath.java:834)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.dealias(ScalametaCommonEnrichments.scala:330)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionURIMtags.toAbsolutePath(MtagsEnrichments.scala:132)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:187)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:773)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:770)
	at scala.meta.internal.parsing.Trees.tokenized(Trees.scala:132)
	at scala.meta.internal.parsing.TokenEditDistance$.apply(TokenEditDistance.scala:505)
	at scala.meta.internal.metals.Diagnostics.toFreshDiagnostic(Diagnostics.scala:279)
	at scala.meta.internal.metals.Diagnostics.$anonfun$publishDiagnostics$2(Diagnostics.scala:239)
	at scala.meta.internal.metals.Diagnostics.$anonfun$publishDiagnostics$2$adapted(Diagnostics.scala:238)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.meta.internal.metals.Diagnostics.publishDiagnostics(Diagnostics.scala:238)
	at scala.meta.internal.metals.Diagnostics.publishDiagnostics(Diagnostics.scala:203)
	at scala.meta.internal.metals.Diagnostics.didChange(Diagnostics.scala:138)
	at scala.meta.internal.metals.MetalsLspService.didChange(MetalsLspService.scala:870)
	at scala.meta.internal.metals.ProjectMetalsLspService.didChange(ProjectMetalsLspService.scala:242)
	at scala.meta.internal.metals.WorkspaceLspService.didChange(WorkspaceLspService.scala:407)
	at scala.meta.metals.lsp.DelegatingScalaService.didChange(DelegatingScalaService.scala:50)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:65)
	... 11 more

2024.12.29 16:09:39 INFO  compiling root (1 scala source)[0m
2024.12.29 16:09:39 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 21m 21.659s)[0m
2024.12.29 16:09:39 INFO  compiling root (1 scala source)[0m
2024.12.29 16:09:39 INFO  time: compiled root in 0.27s[0m
2024.12.29 16:09:39 INFO  time: compiled root in 0.25s[0m
2024.12.29 16:09:39 INFO  compiling root (1 scala source)[0m
2024.12.29 16:09:39 INFO  time: compiled root in 0.16s[0m
2024.12.29 16:10:18 INFO  compiling root (1 scala source)[0m
2024.12.29 16:10:18 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 22m 0.147s)[0m
2024.12.29 16:10:18 INFO  compiling root (1 scala source)[0m
2024.12.29 16:10:18 INFO  time: compiled root in 0.13s[0m
2024.12.29 16:10:18 INFO  time: compiled root in 0.12s[0m
2024.12.29 16:10:18 INFO  compiling root (1 scala source)[0m
2024.12.29 16:10:18 INFO  time: compiled root in 0.13s[0m
2024.12.29 16:11:33 INFO  Shutting down server[0m
2024.12.29 16:11:33 INFO  shutting down Metals[0m
2024.12.29 16:11:33 INFO  Shut down connection with build server.[0m
2024.12.29 16:11:33 INFO  Shut down connection with build server.[0m
2024.12.29 16:11:33 INFO  Shut down connection with build server.[0m
2024.12.29 16:11:40 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@24ac38f5]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@23411b3c]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@24ac38f5]
2024.12.29 16:11:40 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 16:11:40 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:11:40 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:11:40 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:11:40 INFO  Shutting down server[0m
2024.12.29 16:11:40 INFO  shutting down Metals[0m
2024.12.29 16:11:40 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:11:40 INFO  Shut down connection with build server.[0m
2024.12.29 16:11:40 INFO  Shut down connection with build server.[0m
2024.12.29 16:11:40 INFO  Shut down connection with build server.[0m
2024.12.29 16:11:40 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:11:40 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:11:40 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:11:40 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:11:40 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:11:40 INFO  time: Connected to build server in 0.25s[0m
2024.12.29 16:11:40 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 16:11:41 INFO  running doctor check[0m
2024.12.29 16:11:41 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.29 16:11:42 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 16:11:42 INFO  time: indexed workspace in 1.99s[0m
2024.12.29 16:11:43 INFO  compiling root (1 scala source)[0m
2024.12.29 16:11:43 INFO  time: compiled root in 0.22s[0m
Dec 29, 2024 4:11:43 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.29 16:11:43 INFO  compiling root (1 scala source)[0m
2024.12.29 16:11:43 INFO  time: compiled root in 0.14s[0m
2024.12.29 16:12:39 INFO  compiling root (1 scala source)[0m
2024.12.29 16:12:39 INFO  time: compiled root in 0.14s[0m
2024.12.29 16:12:45 INFO  compiling root (1 scala source)[0m
2024.12.29 16:12:45 INFO  time: compiled root in 0.13s[0m
2024.12.29 16:17:05 INFO  compiling root (1 scala source)[0m
2024.12.29 16:17:05 INFO  time: compiled root in 0.13s[0m
2024.12.29 16:17:08 INFO  compiling root (1 scala source)[0m
2024.12.29 16:17:08 INFO  time: compiled root in 0.14s[0m
2024.12.29 16:18:45 INFO  Report absolute-path: ### java.nio.file.NoSuchFileException: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala

Uri: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala


#### Error stacktrace:

```
java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)
	java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:106)
	java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
	java.base/sun.nio.fs.UnixPath.toRealPath(UnixPath.java:834)
	scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.dealias(ScalametaCommonEnrichments.scala:330)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionURIMtags.toAbsolutePath(MtagsEnrichments.scala:132)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:187)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:773)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:770)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:756)
	scala.meta.internal.metals.WorkspaceLspService.getServiceForOpt(WorkspaceLspService.scala:308)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:317)
	scala.meta.internal.metals.WorkspaceLspService.didChange(WorkspaceLspService.scala:407)
	scala.meta.metals.lsp.DelegatingScalaService.didChange(DelegatingScalaService.scala:50)
	java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	java.base/java.lang.reflect.Method.invoke(Method.java:580)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:160)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:231)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:198)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:185)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:97)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:114)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	java.base/java.lang.Thread.run(Thread.java:1583)
```
[0m
2024.12.29 16:18:45 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 16:18:45 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:18:46 INFO  compiling root (1 scala source)[0m
2024.12.29 16:18:46 INFO  time: compiled root in 0.16s[0m
2024.12.29 16:18:48 INFO  compiling root (1 scala source)[0m
2024.12.29 16:18:48 INFO  time: compiled root in 0.17s[0m
2024.12.29 16:18:51 INFO  compiling root (1 scala source)[0m
2024.12.29 16:18:51 INFO  time: compiled root in 0.17s[0m
2024.12.29 16:19:31 INFO  compiling root (1 scala source)[0m
2024.12.29 16:19:31 INFO  time: compiled root in 0.25s[0m
2024.12.29 16:21:19 INFO  compiling root (1 scala source)[0m
2024.12.29 16:21:19 INFO  time: compiled root in 0.16s[0m
2024.12.29 16:21:34 INFO  compiling root (1 scala source)[0m
2024.12.29 16:21:34 INFO  time: compiled root in 0.15s[0m
2024.12.29 16:22:43 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:16: error: [dialect scala3] => expected but outdent found
    val listWithFailures = stringList.map(convertToSoundChange).filter(_ match case Some)
                                                                                    ^[0m
2024.12.29 16:22:43 INFO  compiling root (1 scala source)[0m
2024.12.29 16:22:43 INFO  time: compiled root in 0.16s[0m
2024.12.29 16:23:42 INFO  compiling root (1 scala source)[0m
2024.12.29 16:23:42 INFO  time: compiled root in 0.14s[0m
2024.12.29 16:27:13 INFO  compiling root (1 scala source)[0m
2024.12.29 16:27:13 INFO  time: compiled root in 0.15s[0m
2024.12.29 16:27:58 INFO  compiling root (1 scala source)[0m
2024.12.29 16:27:58 INFO  time: compiled root in 0.15s[0m
2024.12.29 16:28:10 INFO  compiling root (1 scala source)[0m
2024.12.29 16:28:10 INFO  time: compiled root in 0.14s[0m
2024.12.29 16:28:30 INFO  compiling root (1 scala source)[0m
2024.12.29 16:28:30 INFO  time: compiled root in 0.14s[0m
2024.12.29 16:28:45 INFO  compiling root (1 scala source)[0m
2024.12.29 16:28:45 INFO  time: compiled root in 0.13s[0m
2024.12.29 16:28:54 INFO  compiling root (1 scala source)[0m
2024.12.29 16:28:54 INFO  time: compiled root in 0.15s[0m
2024.12.29 16:29:04 INFO  compiling root (1 scala source)[0m
2024.12.29 16:29:04 INFO  time: compiled root in 0.14s[0m
2024.12.29 16:29:16 INFO  compiling root (1 scala source)[0m
2024.12.29 16:29:16 INFO  time: compiled root in 0.14s[0m
2024.12.29 16:29:26 INFO  compiling root (1 scala source)[0m
2024.12.29 16:29:26 INFO  time: compiled root in 0.14s[0m
2024.12.29 16:29:39 INFO  compiling root (1 scala source)[0m
2024.12.29 16:29:39 INFO  time: compiled root in 0.13s[0m
2024.12.29 16:30:46 INFO  compiling root (1 scala source)[0m
2024.12.29 16:30:46 INFO  time: compiled root in 67ms[0m
2024.12.29 16:31:42 INFO  compiling root (1 scala source)[0m
2024.12.29 16:31:42 INFO  time: compiled root in 0.12s[0m
2024.12.29 16:32:05 INFO  compiling root (1 scala source)[0m
2024.12.29 16:32:05 INFO  time: compiled root in 0.13s[0m
2024.12.29 16:35:47 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:38: error: [dialect scala3] illegal start of simple pattern
    val keyChars inputList.map(_.at)
                          ^[0m
2024.12.29 16:35:47 INFO  compiling root (1 scala source)[0m
2024.12.29 16:35:47 INFO  time: compiled root in 0.14s[0m
2024.12.29 16:36:05 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:38: error: [dialect scala3] illegal start of simple pattern
    val keyChars inputList.map(_.at)
                          ^[0m
2024.12.29 16:36:05 INFO  compiling root (1 scala source)[0m
2024.12.29 16:36:05 INFO  time: compiled root in 0.13s[0m
2024.12.29 16:36:09 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:38: error: [dialect scala3] illegal start of simple pattern
    val keyChars inputList.map(_.at)
                          ^[0m
2024.12.29 16:36:09 INFO  compiling root (1 scala source)[0m
2024.12.29 16:36:09 INFO  time: compiled root in 0.14s[0m
2024.12.29 16:37:22 INFO  compiling root (1 scala source)[0m
2024.12.29 16:37:22 INFO  time: compiled root in 0.14s[0m
2024.12.29 16:37:36 INFO  compiling root (1 scala source)[0m
2024.12.29 16:37:36 INFO  time: compiled root in 0.1s[0m
2024.12.29 16:37:46 INFO  compiling root (1 scala source)[0m
2024.12.29 16:37:46 INFO  time: compiled root in 0.26s[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  ")def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  ")def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    ")def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      ")def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:29 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-29-348.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  ")def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  ")def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    ")def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      ")def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:29 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-29-506.md
2024.12.29 16:38:29 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  ")def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  ")def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    ")def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      ")def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:29 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-29-524.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  ")def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  ")def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    ")def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      ")def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:29 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-29-820.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "N)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "N)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "N)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "N)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:31 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-31-120.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "N)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "N)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "N)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "N)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:31 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-31-314.md
2024.12.29 16:38:31 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "No)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "No)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "No)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "No)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:31 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-31-342.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "No)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "No)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "No)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "No)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:31 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-31-358.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "Non)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "Non)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "Non)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "Non)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:31 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-31-507.md
2024.12.29 16:38:31 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "Non)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "Non)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "Non)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "Non)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:31 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-31-523.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "Non)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "Non)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "Non)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "Non)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:31 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-31-537.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:31 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-31-650.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:31 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-31-784.md
2024.12.29 16:38:31 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:31 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-31-803.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:32 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-32-042.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:32 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-32-222.md
2024.12.29 16:38:31 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:32 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-32-239.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None")def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None")def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None")def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None")def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:32 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-32-355.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None")def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None")def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None")def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None")def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:32 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-32-567.md
2024.12.29 16:38:32 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None")def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None")def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None")def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None")def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:32 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-32-587.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:32 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-32-832.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:33 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-32-999.md
2024.12.29 16:38:32 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:33 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-33-014.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" f)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" f)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" f)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" f)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:33 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-33-375.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" fo)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" fo)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" fo)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" fo)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:33 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-33-509.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" fo)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" fo)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" fo)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" fo)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:33 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-33-691.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" fo)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" fo)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" fo)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" fo)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:33 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-33-721.md
2024.12.29 16:38:33 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" fou)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" fou)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" fou)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" fou)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:34 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-34-007.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" fou)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" fou)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" fou)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" fou)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:34 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-34-193.md
2024.12.29 16:38:33 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" foun)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" foun)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" foun)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" foun)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:34 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-34-212.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" foun)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" foun)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" foun)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" foun)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:34 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-34-234.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:34 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-34-338.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:34 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-34-496.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:34 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-34-541.md
2024.12.29 16:38:34 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:34 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-34-557.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found i)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found i)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found i)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found i)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:34 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-34-697.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found i)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found i)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found i)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found i)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:34 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-34-899.md
2024.12.29 16:38:34 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found i)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found i)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found i)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found i)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:34 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-34-917.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:34 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-34-960.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:35 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-35-160.md
2024.12.29 16:38:35 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:35 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-35-179.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:35 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-35-290.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:35 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-35-491.md
2024.12.29 16:38:35 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:35 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-35-510.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in l)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in l)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in l)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in l)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:37 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-37-074.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in l)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in l)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in l)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in l)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:37 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-37-264.md
2024.12.29 16:38:37 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in l)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in l)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in l)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in l)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:37 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-37-284.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:37 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-37-635.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:37 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-37-829.md
2024.12.29 16:38:37 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:37 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-37-849.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in l)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in l)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in l)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in l)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:38 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-38-020.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in li)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in li)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in li)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in li)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:38 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-38-245.md
2024.12.29 16:38:38 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in li)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in li)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in li)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in li)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:38 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-38-265.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in li)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in li)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in li)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in li)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:38 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-38-287.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in lis)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in lis)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in lis)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in lis)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:38 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-38-384.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in list)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in list)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in list)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in list)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:38 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-38-538.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in list)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in list)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in list)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in list)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:38 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-38-612.md
2024.12.29 16:38:38 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in list)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in list)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in list)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in list)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:38 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-38-623.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listO)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listO)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listO)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listO)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:38 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-38-680.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOn)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOn)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOn)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOn)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:38 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-38-836.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOn)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOn)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOn)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOn)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:39 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-39-018.md
2024.12.29 16:38:39 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnl)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnl)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnl)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnl)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:39 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-39-037.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnl)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnl)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnl)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnl)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:39 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-39-053.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnly)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnly)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnly)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnly)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:39 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-39-172.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnly)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnly)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnly)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnly)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:39 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-39-293.md
2024.12.29 16:38:39 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnly)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnly)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnly)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnly)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:39 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-39-310.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlyS)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlyS)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlyS)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlyS)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:39 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-39-353.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlyS)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlyS)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlyS)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlyS)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:39 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-39-567.md
2024.12.29 16:38:39 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlyS)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlyS)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlyS)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlyS)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:39 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-39-588.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySu)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySu)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySu)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySu)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:39 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-39-869.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuc)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuc)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuc)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuc)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:40 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-40-004.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySucc)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySucc)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySucc)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySucc)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:40 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-40-158.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySucc)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySucc)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySucc)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySucc)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:40 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-40-320.md
2024.12.29 16:38:40 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySucce)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySucce)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySucce)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySucce)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:40 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-40-353.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySucc)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySucc)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySucc)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySucc)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:40 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-40-371.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySucce)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySucce)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySucce)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySucce)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:40 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-40-512.md
2024.12.29 16:38:40 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySucce)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySucce)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySucce)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySucce)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:40 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-40-526.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySucces)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySucces)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySucces)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySucces)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:40 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-40-541.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:40 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-40-710.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:40 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-40-907.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:41 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-41-106.md
2024.12.29 16:38:41 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:41 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-41-126.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess a)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess a)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess a)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess a)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:41 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-41-177.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess a)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess a)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess a)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess a)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:41 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-41-364.md
2024.12.29 16:38:41 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess a)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess a)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess a)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess a)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:41 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-41-382.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess at)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess at)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess at)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess at)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:41 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-41-487.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess at )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess at )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess at )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess at )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:41 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-41-634.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess at )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess at )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess at )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess at )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:41 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-41-819.md
2024.12.29 16:38:41 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess at )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess at )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess at )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess at )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:41 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-41-836.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess at)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess at)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess at)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess at)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:43 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-43-511.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess a)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess a)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess a)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess a)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:43 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-43-694.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:43 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-43-827.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:43 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-43-980.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:44 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-44-162.md
2024.12.29 16:38:44 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:44 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-44-182.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:44 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-44-260.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess i)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess i)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess i)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess i)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:44 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-44-407.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess i)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess i)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess i)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess i)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:44 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-44-596.md
2024.12.29 16:38:44 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:44 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-44-614.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess i)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess i)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess i)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess i)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:44 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-44-639.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:44 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-44-752.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:44 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-44-960.md
2024.12.29 16:38:44 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:44 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-44-979.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in f)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in f)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in f)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in f)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:45 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-45-432.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in fu)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in fu)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in fu)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in fu)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:45 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-45-562.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in fun)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in fun)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in fun)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in fun)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:45 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-45-717.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in func)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in func)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in func)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in func)def createWorldList ():
        List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:45 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-45-876.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in func)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in func)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in func)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in func)def createWorldList ():
        List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:45 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-45-924.md
2024.12.29 16:38:45 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in func)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in func)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in func)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in func)def createWorldList ():
        List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:45 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-45-938.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in funct)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in funct)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in funct)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in funct)def createWorldList ():
        List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:46 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-46-008.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in functi)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in functi)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in functi)def createWorldList ():
      List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in functi)def createWorldList ():
        List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:46 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-46-163.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in functi)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in functi)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in functi)def createWorldList ():
      List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in functi)def createWorldList ():
        List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:46 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-46-271.md
2024.12.29 16:38:46 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in functi)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in functi)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in functi)def createWorldList ():
      List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in functi)def createWorldList ():
        List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:46 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-46-288.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in funct)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in funct)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in funct)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in funct)def createWorldList ():
        List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:46 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-46-333.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in funct)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in funct)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in funct)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in funct)def createWorldList ():
        List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:46 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-46-545.md
2024.12.29 16:38:46 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in funct)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in funct)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in funct)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in funct)def createWorldList ():
        List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:46 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-46-565.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in func)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in func)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in func)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in func)def createWorldList ():
        List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:46 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-46-584.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:46 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-46-739.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:46 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-46-927.md
2024.12.29 16:38:46 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:46 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-46-947.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess in)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess in)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess in)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:47 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-47-178.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess i)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess i)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess i)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess i)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:47 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-47-346.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:47 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-47-502.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:47 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-47-654.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:47 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-47-852.md
2024.12.29 16:38:47 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:47 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-47-872.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess.)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess.)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess.)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess.)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:47 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-47-908.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess. )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess. )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:48 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-48-044.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess. )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess. )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:48 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-48-220.md
2024.12.29 16:38:48 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess. )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess. )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:48 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-48-239.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. H)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. H)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess. H)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess. H)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:48 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-48-354.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. H)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. H)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess. H)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess. H)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:48 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-48-553.md
2024.12.29 16:38:48 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. H)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. H)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess. H)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess. H)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:48 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-48-572.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. Ho)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. Ho)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess. Ho)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess. Ho)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:48 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-48-587.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess. How)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess. How)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:48 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-48-737.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:48 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-48-871.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How??)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How??)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess. How??)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess. How??)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:49 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-49-022.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How??)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How??)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess. How??)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess. How??)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:49 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-49-219.md
2024.12.29 16:38:49 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How??)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How??)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess. How??)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess. How??)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:49 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-49-239.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:49 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-49-733.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:49 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-49-918.md
2024.12.29 16:38:49 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:49 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-49-936.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:50 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-50-788.md
2024.12.29 16:38:50 WARN  Could not find semantic tokens for: file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala[0m
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:50 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-50-985.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:51 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-51-346.md
error while checking new RunTimeException(null: <notype>)
error while checking throw new RunTimeException(null: <notype>)
error while checking {
  throw new RunTimeException(null: <notype>)
}
error while checking case _ =>
  throw new RunTimeException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new RunTimeException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new RunTimeException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new RunTimeException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new RunTimeException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new RunTimeException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new RunTimeException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new RunTimeException(null: <notype>)
              }
        )
    }
  "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new RunTimeException(null: <notype>)
                }
          )
      }
    "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new RunTimeException(null: <notype>)
                  }
            )
        }
      "None" found in listOnlySuccess. How?)def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:38:52 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-38-52-948.md
2024.12.29 16:38:54 INFO  compiling root (1 scala source)[0m
2024.12.29 16:38:54 INFO  time: compiled root in 65ms[0m
Dec 29, 2024 4:39:51 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didChange",
  "params": {
    "textDocument": {
      "version": 2096,
      "uri": "file:///Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala"
    },
    "contentChanges": [
      {
        "text": "package com.osprey.app\npackage filereader\n\nimport scala.io.Source\nimport scala.util.{Try, Success, Failure}\nimport soundchange.SoundChange\n\nobject FileReader {\n  def createPhonemeGroupMap(): Map[Char, String] \u003d {\n    val filename \u003d \"phonemegroups.txt\"\n    val lines \u003d getLinesFromFile(filename)\n    return convertToPhonemeGroupMap(lines)\n  }\n\n  def createSoundChangeList(): List[SoundChange] \u003d {\n    val filename \u003d \"soundchanges.txt\"\n    val stringList \u003d getLinesFromFile(filename)\n    val listWithFailures \u003d stringList.map(convertToSoundChange)\n    val listOnlySuccess: List[Option[SoundChange]] \u003d listWithFailures.filter {\n      case Some(_) \u003d\u003e true\n      case None    \u003d\u003e false\n    }\n\n    class NoneFilterErrorException extends Exception\n    return listOnlySuccess.map(_ match\n      case Some(content) \u003d\u003e content\n      case _ \u003d\u003e\n        throw new NoneFilterErrorException(\n          \"\\\"None\\\" found in listOnlySuccess. How?\"\n        )\n    )\n  }\n  def createWorldList(): List[String] \u003d {\n    val filename \u003d \"wordlist.txt\"\n    getLinesFromFile(filename)\n  }\n  def getLinesFromFile(filename: String): List[String] \u003d {\n    val file \u003d Source.fromFile(filename)\n    val lines \u003d file.getLines\n    file.close\n    lines.toList\n  }\n  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] \u003d {\n    return Map(\u0027P\u0027 -\u003e \"[k,t,sr\")\n  }\n\n  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] \u003d {\n    val ANY_CHARS \u003d raw\"[\\u0000-\\uFFFF]*\"\n    val CONVERSION_SYMBOL \u003d raw\"\u003e\"\n    val CONDITION_SYMBOL \u003d raw\"/\"\n    val TARGET_SYMBOL \u003d raw\"_\"\n    def basicSoundChange(input: String): SoundChange \u003d {\n      val basicPattern \u003d raw\"($ANY_CHARS)\u003e($ANY_CHARS)\".r\n      input match {\n        case basicPattern(target, output) \u003d\u003e return SoundChange(target, output)\n      }\n    }\n    def quaternarySoundChange(input: String): SoundChange \u003d {\n      val pattern \u003d raw\"($ANY_CHARS)\u003e($ANY_CHARS)/($ANY_CHARS)_($ANY_CHARS)\".r\n      input match {\n        case pattern(target, output, leftCondition, rightCondition) \u003d\u003e\n          return SoundChange(target, output, leftCondition, rightCondition)\n      }\n    }\n    val input \u003d inputUntrimmed.trim\n    if !input.contains(CONVERSION_SYMBOL) then return None\n    if !input.contains(CONDITION_SYMBOL) then\n      return Some { basicSoundChange(input) }\n    if input.filter(_ \u003d\u003d \u0027\u003e\u0027).size \u003e 1 || input.filter(_ \u003d\u003d \u0027/\u0027).size \u003e 1 then\n      return None\n    return Some(quaternarySoundChange(input))\n  }\n}\n"
      }
    ]
  }
}
java.lang.IllegalStateException: An unexpected exception occurred while executing jsonrpc method public abstract java.util.concurrent.CompletableFuture scala.meta.metals.lsp.TextDocumentService.didChange(org.eclipse.lsp4j.DidChangeTextDocumentParams)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:73)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:160)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:231)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:198)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:185)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:97)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:114)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.nio.file.NoSuchFileException: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala
	at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:106)
	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
	at java.base/sun.nio.fs.UnixPath.toRealPath(UnixPath.java:834)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.dealias(ScalametaCommonEnrichments.scala:330)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionURIMtags.toAbsolutePath(MtagsEnrichments.scala:132)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:187)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:773)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:770)
	at scala.meta.internal.parsing.Trees.tokenized(Trees.scala:132)
	at scala.meta.internal.parsing.TokenEditDistance$.apply(TokenEditDistance.scala:506)
	at scala.meta.internal.metals.Diagnostics.toFreshDiagnostic(Diagnostics.scala:279)
	at scala.meta.internal.metals.Diagnostics.$anonfun$publishDiagnostics$2(Diagnostics.scala:239)
	at scala.meta.internal.metals.Diagnostics.$anonfun$publishDiagnostics$2$adapted(Diagnostics.scala:238)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.meta.internal.metals.Diagnostics.publishDiagnostics(Diagnostics.scala:238)
	at scala.meta.internal.metals.Diagnostics.publishDiagnostics(Diagnostics.scala:203)
	at scala.meta.internal.metals.Diagnostics.didChange(Diagnostics.scala:138)
	at scala.meta.internal.metals.MetalsLspService.didChange(MetalsLspService.scala:870)
	at scala.meta.internal.metals.ProjectMetalsLspService.didChange(ProjectMetalsLspService.scala:242)
	at scala.meta.internal.metals.WorkspaceLspService.didChange(WorkspaceLspService.scala:407)
	at scala.meta.metals.lsp.DelegatingScalaService.didChange(DelegatingScalaService.scala:50)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$recursiveFindRpcMethods$0(GenericEndpoint.java:65)
	... 11 more

2024.12.29 16:39:51 INFO  compiling root (1 scala source)[0m
2024.12.29 16:39:51 INFO  time: compiled root in 0.16s[0m
error while checking new NoneFilterErrorException(null: <notype>)
error while checking throw new NoneFilterErrorException(null: <notype>)
error while checking {
  throw new NoneFilterErrorException(null: <notype>)
}
error while checking case _ =>
  throw new NoneFilterErrorException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new NoneFilterErrorException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new NoneFilterErrorException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new NoneFilterErrorException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new NoneFilterErrorException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  class NoneFilterErrorException extends Exception {}
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new NoneFilterErrorException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    class NoneFilterErrorException extends Exception {}
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new NoneFilterErrorException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      class NoneFilterErrorException extends Exception {}
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new NoneFilterErrorException(null: <notype>)
              }
        )
    }
  "None
    )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      class NoneFilterErrorException extends Exception {}
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new NoneFilterErrorException(null: <notype>)
              }
        )
    }
  "None
    )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        class NoneFilterErrorException extends Exception {}
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new NoneFilterErrorException(null: <notype>)
                }
          )
      }
    "None
    )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          class NoneFilterErrorException extends Exception {}
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new NoneFilterErrorException(null: <notype>)
                  }
            )
        }
      "None
    )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:40:59 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-40-59-257.md
error while checking new NoneFilterErrorException(null: <notype>)
error while checking throw new NoneFilterErrorException(null: <notype>)
error while checking {
  throw new NoneFilterErrorException(null: <notype>)
}
error while checking case _ =>
  throw new NoneFilterErrorException(null: <notype>)
error while checking _$1 match
  {
    case Some(content) =>
      content
    case _ =>
      throw new NoneFilterErrorException(null: <notype>)
  }
error while checking _$1 =>
  _$1 match
    {
      case Some(content) =>
        content
      case _ =>
        throw new NoneFilterErrorException(null: <notype>)
    }
error while checking listOnlySuccess.map(
  _$1 =>
    _$1 match
      {
        case Some(content) =>
          content
        case _ =>
          throw new NoneFilterErrorException(null: <notype>)
      }
)
error while checking return
  listOnlySuccess.map(
    _$1 =>
      _$1 match
        {
          case Some(content) =>
            content
          case _ =>
            throw new NoneFilterErrorException(null: <notype>)
        }
  )
error while checking {
  val filename = "soundchanges.txt"
  val stringList = getLinesFromFile(filename)
  val listWithFailures = stringList.map(convertToSoundChange)
  val listOnlySuccess: List[Option[SoundChange]] =
    listWithFailures.filter(
      {
        case Some(_) =>
          true
        case None =>
          false
      }
    )
  class NoneFilterErrorException extends Exception {}
  return
    listOnlySuccess.map(
      _$1 =>
        _$1 match
          {
            case Some(content) =>
              content
            case _ =>
              throw new NoneFilterErrorException(null: <notype>)
          }
    )
}
error while checking def createSoundChangeList(): List[SoundChange] =
  {
    val filename = "soundchanges.txt"
    val stringList = getLinesFromFile(filename)
    val listWithFailures = stringList.map(convertToSoundChange)
    val listOnlySuccess: List[Option[SoundChange]] =
      listWithFailures.filter(
        {
          case Some(_) =>
            true
          case None =>
            false
        }
      )
    class NoneFilterErrorException extends Exception {}
    return
      listOnlySuccess.map(
        _$1 =>
          _$1 match
            {
              case Some(content) =>
                content
              case _ =>
                throw new NoneFilterErrorException(null: <notype>)
            }
      )
  }
error while checking  {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      class NoneFilterErrorException extends Exception {}
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new NoneFilterErrorException(null: <notype>)
              }
        )
    }
  
    )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking module object FileReader {
  def createPhonemeGroupMap(): Map[Char, String] =
    {
      val filename = "phonemegroups.txt"
      val lines = getLinesFromFile(filename)
      return convertToPhonemeGroupMap(lines)
    }
  def createSoundChangeList(): List[SoundChange] =
    {
      val filename = "soundchanges.txt"
      val stringList = getLinesFromFile(filename)
      val listWithFailures = stringList.map(convertToSoundChange)
      val listOnlySuccess: List[Option[SoundChange]] =
        listWithFailures.filter(
          {
            case Some(_) =>
              true
            case None =>
              false
          }
        )
      class NoneFilterErrorException extends Exception {}
      return
        listOnlySuccess.map(
          _$1 =>
            _$1 match
              {
                case Some(content) =>
                  content
                case _ =>
                  throw new NoneFilterErrorException(null: <notype>)
              }
        )
    }
  
    )def createWorldList ():List[String]
  def getLinesFromFile(filename: String): List[String] =
    {
      val file = Source.fromFile(filename)
      val lines = file.getLines
      file.close
      lines.toList
    }
  def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
    {
      return Map('P' -> "[k,t,sr")
    }
  def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
    {
      val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
      val CONVERSION_SYMBOL = raw">"
      val CONDITION_SYMBOL = raw"/"
      val TARGET_SYMBOL = raw"_"
      def basicSoundChange(input: String): SoundChange =
        {
          val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
          input match
            {
              case basicPattern(target, output) =>
                return SoundChange(target, output)
            }
        }
      def quaternarySoundChange(input: String): SoundChange =
        {
          val pattern =
            raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
          input match
            {
              case pattern(target, output, leftCondition, rightCondition) =>
                return
                  SoundChange(target, output, leftCondition, rightCondition)
            }
        }
      val input = inputUntrimmed.trim
      if ! input.contains(CONVERSION_SYMBOL) then return None
      if ! input.contains(CONDITION_SYMBOL) then
        return
          Some(
            {
              basicSoundChange(input)
            }
          )
      if
        input.filter(_$2 => _$2 == '>').size > 1 ||
          input.filter(_$3 => _$3 == '/').size > 1
       then return None
      return Some(quaternarySoundChange(input))
    }
}
error while checking package filereader {
  import scala.io.Source
  import scala.util.{Try, Success, Failure}
  import soundchange.SoundChange
  module object FileReader {
    def createPhonemeGroupMap(): Map[Char, String] =
      {
        val filename = "phonemegroups.txt"
        val lines = getLinesFromFile(filename)
        return convertToPhonemeGroupMap(lines)
      }
    def createSoundChangeList(): List[SoundChange] =
      {
        val filename = "soundchanges.txt"
        val stringList = getLinesFromFile(filename)
        val listWithFailures = stringList.map(convertToSoundChange)
        val listOnlySuccess: List[Option[SoundChange]] =
          listWithFailures.filter(
            {
              case Some(_) =>
                true
              case None =>
                false
            }
          )
        class NoneFilterErrorException extends Exception {}
        return
          listOnlySuccess.map(
            _$1 =>
              _$1 match
                {
                  case Some(content) =>
                    content
                  case _ =>
                    throw new NoneFilterErrorException(null: <notype>)
                }
          )
      }
    
    )def createWorldList ():List[String]
    def getLinesFromFile(filename: String): List[String] =
      {
        val file = Source.fromFile(filename)
        val lines = file.getLines
        file.close
        lines.toList
      }
    def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String] =
      {
        return Map('P' -> "[k,t,sr")
      }
    def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
      {
        val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
        val CONVERSION_SYMBOL = raw">"
        val CONDITION_SYMBOL = raw"/"
        val TARGET_SYMBOL = raw"_"
        def basicSoundChange(input: String): SoundChange =
          {
            val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
            input match
              {
                case basicPattern(target, output) =>
                  return SoundChange(target, output)
              }
          }
        def quaternarySoundChange(input: String): SoundChange =
          {
            val pattern =
              raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
            input match
              {
                case pattern(target, output, leftCondition, rightCondition) =>
                  return
                    SoundChange(target, output, leftCondition, rightCondition)
              }
          }
        val input = inputUntrimmed.trim
        if ! input.contains(CONVERSION_SYMBOL) then return None
        if ! input.contains(CONDITION_SYMBOL) then
          return
            Some(
              {
                basicSoundChange(input)
              }
            )
        if
          input.filter(_$2 => _$2 == '>').size > 1 ||
            input.filter(_$3 => _$3 == '/').size > 1
         then return None
        return Some(quaternarySoundChange(input))
      }
  }
}
error while checking package com.osprey.app {
  package filereader {
    import scala.io.Source
    import scala.util.{Try, Success, Failure}
    import soundchange.SoundChange
    module object FileReader {
      def createPhonemeGroupMap(): Map[Char, String] =
        {
          val filename = "phonemegroups.txt"
          val lines = getLinesFromFile(filename)
          return convertToPhonemeGroupMap(lines)
        }
      def createSoundChangeList(): List[SoundChange] =
        {
          val filename = "soundchanges.txt"
          val stringList = getLinesFromFile(filename)
          val listWithFailures = stringList.map(convertToSoundChange)
          val listOnlySuccess: List[Option[SoundChange]] =
            listWithFailures.filter(
              {
                case Some(_) =>
                  true
                case None =>
                  false
              }
            )
          class NoneFilterErrorException extends Exception {}
          return
            listOnlySuccess.map(
              _$1 =>
                _$1 match
                  {
                    case Some(content) =>
                      content
                    case _ =>
                      throw new NoneFilterErrorException(null: <notype>)
                  }
            )
        }
      
    )def createWorldList ():List[String]
      def getLinesFromFile(filename: String): List[String] =
        {
          val file = Source.fromFile(filename)
          val lines = file.getLines
          file.close
          lines.toList
        }
      def convertToPhonemeGroupMap(inputList: List[String]): Map[Char, String]
         =
        {
          return Map('P' -> "[k,t,sr")
        }
      def convertToSoundChange(inputUntrimmed: String): Option[SoundChange] =
        {
          val ANY_CHARS = raw"[\\u0000-\\uFFFF]*"
          val CONVERSION_SYMBOL = raw">"
          val CONDITION_SYMBOL = raw"/"
          val TARGET_SYMBOL = raw"_"
          def basicSoundChange(input: String): SoundChange =
            {
              val basicPattern = raw"({ANY_CHARS})>({ANY_CHARS})".r
              input match
                {
                  case basicPattern(target, output) =>
                    return SoundChange(target, output)
                }
            }
          def quaternarySoundChange(input: String): SoundChange =
            {
              val pattern =
                raw"({ANY_CHARS})>({ANY_CHARS})/({ANY_CHARS})_({ANY_CHARS})".r
              input match
                {
                  case pattern(target, output, leftCondition, rightCondition)
                     =>
                    return
                      SoundChange(target, output, leftCondition, rightCondition)
                  }
            }
          val input = inputUntrimmed.trim
          if ! input.contains(CONVERSION_SYMBOL) then return None
          if ! input.contains(CONDITION_SYMBOL) then
            return
              Some(
                {
                  basicSoundChange(input)
                }
              )
          if
            input.filter(_$2 => _$2 == '>').size > 1 ||
              input.filter(_$3 => _$3 == '/').size > 1
           then return None
          return Some(quaternarySoundChange(input))
        }
    }
  }
}
Dec 29, 2024 4:40:59 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report /Users/marcinzawadiak/Desk/osprey/.metals/.reports/metals-full/2024-12-29/r_compiler-error_(root)_16-40-59-875.md
2024.12.29 16:41:23 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@2950c386]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@3eef3bf4]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@2950c386]
2024.12.29 16:41:23 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 16:41:23 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:41:23 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:41:23 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:41:23 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:41:23 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:41:23 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:41:23 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:41:23 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:41:23 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:41:23 INFO  time: Connected to build server in 0.23s[0m
2024.12.29 16:41:23 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 16:41:23 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/sanitise/Sanitise.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:41:24 INFO  running doctor check[0m
2024.12.29 16:41:24 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.29 16:41:25 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 16:41:25 INFO  time: indexed workspace in 2.27s[0m
2024.12.29 16:41:26 INFO  compiling root (1 scala source)[0m
2024.12.29 16:41:26 INFO  time: compiled root in 93ms[0m
Dec 29, 2024 4:41:26 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.29 16:41:26 INFO  compiling root (1 scala source)[0m
2024.12.29 16:41:26 INFO  time: compiled root in 62ms[0m
2024.12.29 16:42:47 INFO  compiling root (1 scala source)[0m
2024.12.29 16:42:47 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 31m 6.564s)[0m
2024.12.29 16:42:47 INFO  compiling root (1 scala source)[0m
2024.12.29 16:42:47 INFO  time: compiled root in 0.14s[0m
2024.12.29 16:42:47 INFO  time: compiled root in 0.12s[0m
2024.12.29 16:42:47 INFO  compiling root (1 scala source)[0m
2024.12.29 16:42:47 INFO  time: compiled root in 0.13s[0m
2024.12.29 16:42:49 INFO  compiling root (1 scala source)[0m
2024.12.29 16:42:49 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 1m 25.3s)[0m
2024.12.29 16:42:49 INFO  compiling root (1 scala source)[0m
2024.12.29 16:42:49 INFO  time: compiled root in 0.11s[0m
2024.12.29 16:42:49 INFO  time: compiled root in 0.12s[0m
2024.12.29 16:42:49 INFO  compiling root (1 scala source)[0m
2024.12.29 16:42:49 INFO  time: compiled root in 0.22s[0m
2024.12.29 16:43:36 INFO  compiling root (1 scala source)[0m
2024.12.29 16:43:36 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 31m 55.751s)[0m
2024.12.29 16:43:36 INFO  compiling root (1 scala source)[0m
2024.12.29 16:43:36 INFO  time: compiled root in 0.19s[0m
2024.12.29 16:43:36 INFO  time: compiled root in 0.18s[0m
2024.12.29 16:43:41 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:71: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:43:41 INFO  compiling root (1 scala source)[0m
2024.12.29 16:43:41 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 2m 17.837s)[0m
2024.12.29 16:43:41 INFO  compiling root (1 scala source)[0m
2024.12.29 16:43:41 INFO  time: compiled root in 46ms[0m
2024.12.29 16:43:41 INFO  time: compiled root in 76ms[0m
2024.12.29 16:43:41 INFO  compiling root (1 scala source)[0m
2024.12.29 16:43:41 INFO  time: compiled root in 64ms[0m
2024.12.29 16:43:45 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:71: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:43:45 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 2m 21.907s)[0m
2024.12.29 16:43:45 INFO  compiling root (1 scala source)[0m
2024.12.29 16:43:45 INFO  compiling root (1 scala source)[0m
2024.12.29 16:43:45 INFO  time: compiled root in 88ms[0m
2024.12.29 16:43:45 INFO  time: compiled root in 89ms[0m
2024.12.29 16:43:45 INFO  compiling root (1 scala source)[0m
2024.12.29 16:43:45 INFO  time: compiled root in 38ms[0m
2024.12.29 16:43:48 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:71: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:43:48 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 2m 24.467s)[0m
2024.12.29 16:43:48 INFO  compiling root (1 scala source)[0m
2024.12.29 16:43:48 INFO  compiling root (1 scala source)[0m
2024.12.29 16:43:48 INFO  time: compiled root in 64ms[0m
2024.12.29 16:43:48 INFO  time: compiled root in 64ms[0m
2024.12.29 16:43:48 INFO  compiling root (1 scala source)[0m
2024.12.29 16:43:48 INFO  time: compiled root in 73ms[0m
2024.12.29 16:43:51 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:71: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:43:51 INFO  compiling root (1 scala source)[0m
2024.12.29 16:43:51 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 2m 28.114s)[0m
2024.12.29 16:43:51 INFO  compiling root (1 scala source)[0m
2024.12.29 16:43:51 INFO  time: compiled root in 65ms[0m
2024.12.29 16:43:51 INFO  time: compiled root in 70ms[0m
2024.12.29 16:43:51 INFO  compiling root (1 scala source)[0m
2024.12.29 16:43:51 INFO  time: compiled root in 58ms[0m
2024.12.29 16:43:57 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:71: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:43:57 INFO  compiling root (1 scala source)[0m
2024.12.29 16:43:57 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 2m 33.702s)[0m
2024.12.29 16:43:57 INFO  compiling root (1 scala source)[0m
2024.12.29 16:43:57 INFO  time: compiled root in 72ms[0m
2024.12.29 16:43:57 INFO  time: compiled root in 76ms[0m
2024.12.29 16:43:57 INFO  compiling root (1 scala source)[0m
2024.12.29 16:43:57 INFO  time: compiled root in 70ms[0m
2024.12.29 16:46:12 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:72: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:46:12 INFO  compiling root (1 scala source)[0m
2024.12.29 16:46:12 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 34m 31.557s)[0m
2024.12.29 16:46:12 INFO  compiling root (1 scala source)[0m
2024.12.29 16:46:12 INFO  time: compiled root in 79ms[0m
2024.12.29 16:46:12 INFO  time: compiled root in 70ms[0m
2024.12.29 16:46:12 INFO  compiling root (1 scala source)[0m
2024.12.29 16:46:12 INFO  time: compiled root in 78ms[0m
2024.12.29 16:46:59 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:72: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:46:59 INFO  compiling root (1 scala source)[0m
2024.12.29 16:46:59 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 35m 19.019s)[0m
2024.12.29 16:46:59 INFO  compiling root (1 scala source)[0m
2024.12.29 16:46:59 INFO  time: compiled root in 76ms[0m
2024.12.29 16:46:59 INFO  time: compiled root in 72ms[0m
2024.12.29 16:46:59 INFO  compiling root (1 scala source)[0m
2024.12.29 16:46:59 INFO  time: compiled root in 67ms[0m
2024.12.29 16:47:04 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:72: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:47:04 INFO  compiling root (1 scala source)[0m
2024.12.29 16:47:04 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 5m 41.045s)[0m
2024.12.29 16:47:04 INFO  compiling root (1 scala source)[0m
2024.12.29 16:47:04 INFO  time: compiled root in 53ms[0m
2024.12.29 16:47:04 INFO  time: compiled root in 68ms[0m
2024.12.29 16:47:04 INFO  compiling root (1 scala source)[0m
2024.12.29 16:47:04 INFO  time: compiled root in 74ms[0m
2024.12.29 16:47:08 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:72: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:47:08 INFO  compiling root (1 scala source)[0m
2024.12.29 16:47:08 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 5m 45.135s)[0m
2024.12.29 16:47:08 INFO  compiling root (1 scala source)[0m
2024.12.29 16:47:08 INFO  time: compiled root in 60ms[0m
2024.12.29 16:47:08 INFO  time: compiled root in 66ms[0m
2024.12.29 16:47:08 INFO  compiling root (1 scala source)[0m
2024.12.29 16:47:08 INFO  time: compiled root in 58ms[0m
2024.12.29 16:47:13 INFO  Deduplicating compilation of root from bsp client 'Metals 1.3.5' (since 35m 33.187s)[0m
2024.12.29 16:47:13 INFO  compiling root (1 scala source)[0m
2024.12.29 16:47:13 INFO  compiling root (1 scala source)[0m
2024.12.29 16:47:13 INFO  time: compiled root in 71ms[0m
2024.12.29 16:47:13 INFO  time: compiled root in 71ms[0m
2024.12.29 16:47:13 INFO  compiling root (1 scala source)[0m
2024.12.29 16:47:13 INFO  time: compiled root in 58ms[0m
2024.12.29 16:47:14 INFO  Shutting down server[0m
2024.12.29 16:47:14 INFO  shutting down Metals[0m
2024.12.29 16:47:14 INFO  Shut down connection with build server.[0m
2024.12.29 16:47:14 INFO  Shut down connection with build server.[0m
2024.12.29 16:47:14 INFO  Shut down connection with build server.[0m
2024.12.29 16:47:26 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:72: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:47:27 INFO  compiling root (1 scala source)[0m
2024.12.29 16:47:27 INFO  time: compiled root in 74ms[0m
2024.12.29 16:48:02 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:72: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:48:03 INFO  compiling root (1 scala source)[0m
2024.12.29 16:48:03 INFO  time: compiled root in 0.18s[0m
2024.12.29 16:48:22 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:72: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:48:23 INFO  compiling root (1 scala source)[0m
2024.12.29 16:48:23 INFO  time: compiled root in 78ms[0m
2024.12.29 16:50:09 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:75: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:50:09 INFO  compiling root (1 scala source)[0m
2024.12.29 16:50:09 INFO  time: compiled root in 0.15s[0m
2024.12.29 16:50:53 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:75: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:50:53 INFO  compiling root (1 scala source)[0m
2024.12.29 16:50:53 INFO  time: compiled root in 83ms[0m
2024.12.29 16:51:32 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:74: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:51:32 INFO  compiling root (1 scala source)[0m
2024.12.29 16:51:32 INFO  time: compiled root in 78ms[0m
2024.12.29 16:51:37 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:74: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:51:37 INFO  compiling root (1 scala source)[0m
2024.12.29 16:51:37 INFO  time: compiled root in 0.14s[0m
2024.12.29 16:51:44 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:74: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:51:44 INFO  compiling root (1 scala source)[0m
2024.12.29 16:51:44 INFO  time: compiled root in 75ms[0m
2024.12.29 16:52:12 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:73: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:52:12 INFO  compiling root (1 scala source)[0m
2024.12.29 16:52:12 INFO  time: compiled root in 86ms[0m
2024.12.29 16:52:23 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:73: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:52:23 INFO  compiling root (1 scala source)[0m
2024.12.29 16:52:23 INFO  time: compiled root in 83ms[0m
2024.12.29 16:52:25 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:73: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:52:25 INFO  Shutting down server[0m
2024.12.29 16:52:25 INFO  shutting down Metals[0m
2024.12.29 16:52:25 INFO  compiling root (1 scala source)[0m
2024.12.29 16:52:25 INFO  Shut down connection with build server.[0m
2024.12.29 16:52:25 INFO  Shut down connection with build server.[0m
2024.12.29 16:52:25 INFO  Shut down connection with build server.[0m
Dec 29, 2024 4:52:25 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint notify
INFO: Failed to send notification message.
org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.nio.channels.AsynchronousCloseException
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:41)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.notify(RemoteEndpoint.java:135)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.sendCancelNotification(RemoteEndpoint.java:191)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:160)
	at scala.meta.internal.metals.utils.FutureWithTimeout$$anon$1.$anonfun$cancel$1(FutureWithTimeout.scala:37)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:217)
	at scala.meta.internal.metals.utils.FutureWithTimeout$$anon$1.cancel(FutureWithTimeout.scala:37)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:334)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.utils.RequestRegistry.cancel(RequestRegistry.scala:94)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:450)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:182)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:174)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.nio.channels.AsynchronousCloseException
	at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:203)
	at java.base/sun.nio.ch.SinkChannelImpl.endWrite(SinkChannelImpl.java:268)
	at java.base/sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:290)
	at java.base/sun.nio.ch.ChannelOutputStream.writeFully(ChannelOutputStream.java:68)
	at java.base/sun.nio.ch.ChannelOutputStream.write(ChannelOutputStream.java:102)
	at java.base/java.io.OutputStream.write(OutputStream.java:124)
	at java.base/sun.nio.ch.ChannelOutputStream.write(ChannelOutputStream.java:79)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:139)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:110)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:67)
	... 20 more

2024.12.29 16:52:25 INFO  Cancelling compilation on Bloop server[0m
java.util.concurrent.RejectedExecutionException: Task Future(<not completed>) rejected from java.util.concurrent.ThreadPoolExecutor@45ca843[Shutting down, pool size = 2, active threads = 2, queued tasks = 0, completed tasks = 61979]
	at java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2081)
	at java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:841)
	at java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1376)
	at scala.concurrent.impl.ExecutionContextImpl.execute(ExecutionContextImpl.scala:21)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:429)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:435)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:506)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024.12.29 16:52:25 INFO  unable to setup persistent H2 database with AUTO_SERVER=true, falling back to AUTO_SERVER=false.[0m
2024.12.29 16:52:29 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@75ec89de]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@24c48b79]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@75ec89de]
2024.12.29 16:52:31 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 16:52:31 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:52:31 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:52:31 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:52:31 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:52:31 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:52:31 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:52:31 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:52:31 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:52:31 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:52:31 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:52:31 INFO  time: Connected to build server in 0.26s[0m
2024.12.29 16:52:31 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 16:52:31 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:52:31 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:52:31 INFO  running doctor check[0m
2024.12.29 16:52:31 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.29 16:52:32 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:73: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:52:32 INFO  Shutting down server[0m
2024.12.29 16:52:32 INFO  shutting down Metals[0m
2024.12.29 16:52:32 INFO  compiling root (1 scala source)[0m
2024.12.29 16:52:32 INFO  Shut down connection with build server.[0m
2024.12.29 16:52:32 INFO  Shut down connection with build server.[0m
2024.12.29 16:52:33 INFO  Shut down connection with build server.[0m
2024.12.29 16:52:32 INFO  time: compiled root in 0.17s[0m
Dec 29, 2024 4:52:33 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint notify
INFO: Failed to send notification message.
org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.nio.channels.AsynchronousCloseException
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:41)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.notify(RemoteEndpoint.java:135)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.sendCancelNotification(RemoteEndpoint.java:191)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:160)
	at scala.meta.internal.metals.utils.FutureWithTimeout$$anon$1.$anonfun$cancel$1(FutureWithTimeout.scala:37)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:217)
	at scala.meta.internal.metals.utils.FutureWithTimeout$$anon$1.cancel(FutureWithTimeout.scala:37)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:334)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.utils.RequestRegistry.cancel(RequestRegistry.scala:94)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:450)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:182)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:174)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: java.nio.channels.AsynchronousCloseException
	at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:203)
	at java.base/sun.nio.ch.SinkChannelImpl.endWrite(SinkChannelImpl.java:268)
	at java.base/sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:290)
	at java.base/sun.nio.ch.ChannelOutputStream.writeFully(ChannelOutputStream.java:68)
	at java.base/sun.nio.ch.ChannelOutputStream.write(ChannelOutputStream.java:102)
	at java.base/java.io.OutputStream.write(OutputStream.java:124)
	at java.base/sun.nio.ch.ChannelOutputStream.write(ChannelOutputStream.java:79)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:139)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:110)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:67)
	... 20 more

java.util.concurrent.RejectedExecutionException: Task Future(<not completed>) rejected from java.util.concurrent.ThreadPoolExecutor@45ca843[Shutting down, pool size = 15, active threads = 5, queued tasks = 0, completed tasks = 275]
	at java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2081)
	at java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:841)
	at java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1376)
	at scala.concurrent.impl.ExecutionContextImpl.execute(ExecutionContextImpl.scala:21)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:429)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:435)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.handleFailure(Promise.scala:444)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:506)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024.12.29 16:52:35 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@7e032750]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@6a254990]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@7e032750]
2024.12.29 16:52:37 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 16:52:37 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:52:37 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:52:37 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:52:37 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:52:37 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:52:37 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:52:37 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:52:37 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:52:37 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:52:38 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:52:38 INFO  time: Connected to build server in 0.29s[0m
2024.12.29 16:52:38 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 16:52:37 INFO  no build target found for /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:52:37 INFO  running doctor check[0m
2024.12.29 16:52:37 INFO  java targets: root-test, osprey-build, root, osprey-build-build[0m
2024.12.29 16:52:39 ERROR scalafmt: /Users/marcinzawadiak/Desk/osprey/src/main/scala/filereader/FileReader.scala:73: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:52:39 INFO  Shutting down server[0m
2024.12.29 16:52:39 INFO  shutting down Metals[0m
2024.12.29 16:52:39 INFO  Shut down connection with build server.[0m
2024.12.29 16:52:39 INFO  Shut down connection with build server.[0m
2024.12.29 16:52:39 INFO  Shut down connection with build server.[0m
2024.12.29 16:52:39 INFO  Cancelling compilation on Bloop server
org.h2.jdbc.JdbcSQLNonTransientConnectionException: Connection is broken: "session closed" [90067-230]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:690)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:621)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:560)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1164)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:93)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:315)
	at scala.meta.internal.metals.JdbcEnrichments$XtensionConnection.query(JdbcEnrichments.scala:35)
	at scala.meta.internal.metals.DismissedNotifications$Notification.isDismissed(DismissedNotifications.scala:68)
	at scala.meta.internal.metals.utils.RequestRegistry.$anonfun$register$1(RequestRegistry.scala:63)
	at scala.meta.internal.metals.utils.RequestRegistry.$anonfun$register$1$adapted(RequestRegistry.scala:63)
	at scala.Option.exists(Option.scala:406)
	at scala.meta.internal.metals.utils.RequestRegistry.register(RequestRegistry.scala:63)
	at scala.meta.internal.metals.BuildServerConnection.scala$meta$internal$metals$BuildServerConnection$$runWithCanceling$1(BuildServerConnection.scala:511)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$3(BuildServerConnection.scala:521)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:470)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.lang.Thread.run(Thread.java:1583)
[0m
java.util.concurrent.RejectedExecutionException: Task Future(<not completed>) rejected from java.util.concurrent.ThreadPoolExecutor@45ca843[Shutting down, pool size = 4, active threads = 2, queued tasks = 0, completed tasks = 252]
	at java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2081)
	at java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:841)
	at java.base/java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1376)
	at scala.concurrent.impl.ExecutionContextImpl.execute(ExecutionContextImpl.scala:21)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:429)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$DefaultPromise.linkRootOf(Promise.scala:347)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:492)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024.12.29 16:53:30 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/Osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@7d792e95]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@336d8392]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@7d792e95]
2024.12.29 16:53:30 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 16:53:31 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:53:31 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:53:31 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:53:31 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:53:31 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:53:31 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:53:31 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:53:31 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:53:31 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:53:31 INFO  time: Connected to build server in 0.37s[0m
2024.12.29 16:53:31 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 16:53:31 INFO  running doctor check[0m
2024.12.29 16:53:31 INFO  java targets: osprey-build, root-test, osprey-build-build, root[0m
2024.12.29 16:53:33 ERROR scalafmt: /Users/marcinzawadiak/Desk/Osprey/src/main/scala/filereader/FileReader.scala:73: error: [dialect scala3] end of file expected but } found
}
^[0m
2024.12.29 16:53:33 INFO  compiling root (1 scala source)[0m
2024.12.29 16:53:33 INFO  time: compiled root in 0.17s[0m
Dec 29, 2024 4:53:33 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.29 16:53:33 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 16:53:33 INFO  time: indexed workspace in 2.29s[0m
2024.12.29 16:53:33 INFO  compiling root (1 scala source)[0m
2024.12.29 16:53:33 INFO  time: compiled root in 71ms[0m
2024.12.29 16:53:34 INFO  compiling root (1 scala source)[0m
2024.12.29 16:53:34 INFO  time: compiled root in 60ms[0m
2024.12.29 16:53:38 INFO  compiling root (1 scala source)[0m
2024.12.29 16:53:38 INFO  time: compiled root in 0.2s[0m
2024.12.29 16:53:43 INFO  Shutting down server[0m
2024.12.29 16:53:43 INFO  shutting down Metals[0m
2024.12.29 16:53:43 INFO  Shut down connection with build server.[0m
2024.12.29 16:53:43 INFO  Shut down connection with build server.[0m
2024.12.29 16:53:43 INFO  Shut down connection with build server.[0m
2024.12.29 16:54:50 INFO  Started: Metals version 1.3.5 in folders '/Users/marcinzawadiak/Desk/Osprey' for client Neovim 0.10.2.[0m
SLF4J(W): Class path contains multiple SLF4J providers.
SLF4J(W): Found provider [scribe.slf4j.ScribeServiceProvider@6da528d8]
SLF4J(W): Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@1fb51fdd]
SLF4J(W): See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J(I): Actual provider is of type [scribe.slf4j.ScribeServiceProvider@6da528d8]
2024.12.29 16:54:50 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 16:54:50 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:54:50 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:54:50 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:54:50 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:54:50 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:54:50 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:54:50 INFO  Attempting to connect to the build server...[0m
2024.12.29 16:54:50 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:54:50 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:54:50 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at /Users/marcinzawadiak/Desk/Osprey/project/project/.metals/bsp.trace.json or /Users/marcinzawadiak/Library/Caches/org.scalameta.metals/bsp.trace.json[0m
2024.12.29 16:54:50 INFO  time: Connected to build server in 0.26s[0m
2024.12.29 16:54:50 INFO  Connected to Build server: Bloop v1.6.0[0m
2024.12.29 16:54:51 INFO  no build target found for /Users/marcinzawadiak/Desk/Osprey/src/main/scala/filereader/FileReader.scala. Using presentation compiler with project's scala-library version: 3.3.3[0m
2024.12.29 16:54:50 INFO  running doctor check[0m
2024.12.29 16:54:50 INFO  java targets: osprey-build, root-test, osprey-build-build, root[0m
2024.12.29 16:54:52 WARN  Flyway upgrade recommended: H2 2.3.230 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.[0m
2024.12.29 16:54:52 INFO  time: indexed workspace in 2.16s[0m
Dec 29, 2024 4:54:53 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
2024.12.29 16:55:06 INFO  compiling root (1 scala source)[0m
2024.12.29 16:55:06 INFO  time: compiled root in 0.19s[0m
2024.12.29 16:55:18 INFO  compiling root (1 scala source)[0m
2024.12.29 16:55:18 INFO  time: compiled root in 78ms[0m
2024.12.29 16:55:22 INFO  compiling root (1 scala source)[0m
2024.12.29 16:55:22 INFO  time: compiled root in 91ms[0m
2024.12.29 16:55:56 INFO  compiling root (1 scala source)[0m
2024.12.29 16:55:56 INFO  time: compiled root in 68ms[0m
2024.12.29 16:56:44 INFO  compiling root (1 scala source)[0m
2024.12.29 16:56:44 INFO  time: compiled root in 75ms[0m
2024.12.29 16:56:58 ERROR scalafmt: /Users/marcinzawadiak/Desk/Osprey/src/main/scala/filereader/FileReader.scala:26: error: [dialect scala3] ) expected but => found
    return listOnlySuccess.map((o: @unchecked) => o match
                                               ^[0m
2024.12.29 16:56:58 INFO  compiling root (1 scala source)[0m
2024.12.29 16:56:58 INFO  time: compiled root in 87ms[0m
2024.12.29 16:57:05 ERROR scalafmt: /Users/marcinzawadiak/Desk/Osprey/src/main/scala/filereader/FileReader.scala:26: error: [dialect scala3] ) expected but => found
    return listOnlySuccess.map(o: @unchecked => o match
                                             ^[0m
2024.12.29 16:57:05 INFO  compiling root (1 scala source)[0m
2024.12.29 16:57:05 INFO  time: compiled root in 76ms[0m
2024.12.29 16:58:04 INFO  compiling root (1 scala source)[0m
2024.12.29 16:58:04 INFO  time: compiled root in 0.2s[0m
2024.12.29 16:58:23 INFO  compiling root (1 scala source)[0m
2024.12.29 16:58:23 INFO  time: compiled root in 0.15s[0m
2024.12.29 16:58:46 INFO  compiling root (1 scala source)[0m
2024.12.29 16:58:46 INFO  time: compiled root in 0.16s[0m
2024.12.29 16:58:49 INFO  compiling root (1 scala source)[0m
2024.12.29 16:58:49 INFO  time: compiled root in 0.15s[0m
2024.12.29 16:58:53 INFO  compiling root (1 scala source)[0m
2024.12.29 16:58:53 INFO  time: compiled root in 0.23s[0m
2024.12.29 16:58:59 INFO  compiling root (1 scala source)[0m
2024.12.29 16:58:59 INFO  time: compiled root in 0.14s[0m
2024.12.29 16:59:26 INFO  compiling root (1 scala source)[0m
2024.12.29 16:59:26 INFO  time: compiled root in 0.13s[0m
2024.12.29 16:59:28 INFO  compiling root (1 scala source)[0m
2024.12.29 16:59:28 INFO  time: compiled root in 0.14s[0m
2024.12.29 16:59:31 INFO  Shutting down server[0m
2024.12.29 16:59:31 INFO  shutting down Metals[0m
2024.12.29 16:59:31 INFO  Shut down connection with build server.[0m
2024.12.29 16:59:31 INFO  Shut down connection with build server.[0m
2024.12.29 16:59:31 INFO  Shut down connection with build server.[0m
